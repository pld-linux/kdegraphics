diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/ecma/.#ksvg_lookup.h.1.41 kdegraphics-3.2.3/ksvg/ecma/.#ksvg_lookup.h.1.41
--- kdegraphics-3.2.3/ksvg.orig/ecma/.#ksvg_lookup.h.1.41	1970-01-01 01:00:00.000000000 +0100
+++ kdegraphics-3.2.3/ksvg/ecma/.#ksvg_lookup.h.1.41	2004-06-11 22:41:43.000000000 +0200
@@ -0,0 +1,318 @@
+/*
+    Copyright (C) 2002-2003 KSVG Team
+	This file is part of the KDE project
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+    Boston, MA 02111-1307, USA.
+*/
+
+#ifndef KSVG_LOOKUP_H
+#define KSVG_LOOKUP_H
+
+#include <kjs/object.h>
+#include <kjs/lookup.h>
+#include <kjs/interpreter.h> // for ExecState
+#include "ksvg_scriptinterpreter.h"
+
+class KSVGScriptInterpreter;
+
+#define KSVG_GET_COMMON \
+public: \
+    \
+    /* The standard hasProperty call, auto-generated. Looks in hashtable, forwards to parents. */ \
+    bool hasProperty(KJS::ExecState *exec, const KJS::Identifier &propertyName) const; \
+    \
+    /* get() method, called by KSVGBridge::get */ \
+    KJS::Value get(KJS::ExecState *exec, const KJS::Identifier &propertyName, const KJS::ObjectImp* bridge) const; \
+    \
+    /* Called by lookupGet(). Auto-generated. Forwards to the parent which has the given property. */ \
+    KJS::Value getInParents(KJS::ExecState *exec, const KJS::Identifier &propertyName, const KJS::ObjectImp* bridge) const; \
+    \
+    KJS::Object prototype(KJS::ExecState *exec) const;\
+    \
+    static const KJS::ClassInfo s_classInfo; \
+    \
+    static const struct KJS::HashTable s_hashTable; \
+	\
+	int m_attrFlags;
+
+// For classes with properties to read, and a hashtable.
+#define KSVG_GET \
+    KSVG_GET_COMMON \
+    KJS::Value cache(KJS::ExecState *exec) const;
+
+// Same thing, for base classes (kalyptus helps finding them)
+// The difference is that cache() is virtual
+#define KSVG_BASECLASS_GET \
+    KSVG_GET_COMMON \
+    virtual KJS::Value cache(KJS::ExecState *exec) const;
+
+// For classes without properties, but with a parent class to forward to
+#define KSVG_FORWARDGET \
+public: \
+    \
+    bool hasProperty(KJS::ExecState *exec, const KJS::Identifier &propertyName) const; \
+    \
+    /* will have the code for getInParents */ \
+    KJS::Value get(KJS::ExecState *exec, const KJS::Identifier &propertyName, const KJS::ObjectImp* bridge) const; \
+    \
+    KJS::Object prototype(KJS::ExecState *exec) const;\
+    \
+    static const KJS::ClassInfo s_classInfo; \
+    \
+    KJS::Value cache(KJS::ExecState *exec) const;
+
+// For read-write classes only, i.e. those which support put()
+#define KSVG_PUT \
+    \
+    /* put() method, called by KSVGBridge::put */ \
+    bool put(KJS::ExecState *exec, const KJS::Identifier &propertyName, const KJS::Value &value, int attr); \
+	\
+    /* Called by lookupPut. Auto-generated. Looks in hashtable, forwards to parents. */ \
+    bool putInParents(KJS::ExecState *exec, const KJS::Identifier &propertyName, const KJS::Value &value, int attr);
+
+// For classes which inherit a read-write class, but have no readwrite property themselves
+#define KSVG_FORWARDPUT \
+    \
+    /* put() method, called by KSVGBridge::put */ \
+    bool put(KJS::ExecState *exec, const KJS::Identifier &propertyName, const KJS::Value &value, int attr);
+
+// For classes which need to be accessable with getElementById -> elements
+#define KSVG_NO_TAG_BRIDGE \
+public: \
+	KJS::ObjectImp *bridge(KJS::ExecState *) const { return 0; }
+
+#define KSVG_BRIDGE \
+public: \
+	KJS::ObjectImp *bridge(KJS::ExecState *) const; \
+	virtual DOM::DOMString tagName() const { return s_tagName; } \
+	static const DOM::DOMString s_tagName;
+
+// Fast setting of default values, if the token is known
+// Note: this is actually misnamed it should be KSVG_SET_DEFAULT_ATTRIBUTE
+#define KSVG_SET_ALT_ATTRIBUTE(Token, Name) putValueProperty(ownerDoc()->ecmaEngine()->globalExec(), Token, String(Name), Internal);
+
+// Check if attribute has not been parsed, if the token is known
+#define KSVG_TOKEN_NOT_PARSED_ELEMENT(Token, Element) (~Element->m_attrFlags & (1 << Token))
+#define KSVG_TOKEN_NOT_PARSED(Token) KSVG_TOKEN_NOT_PARSED_ELEMENT(Token, this)
+
+// Checks if the interpreter is in attribute "getting" mode
+#define KSVG_CHECK_ATTRIBUTE bool attributeMode = static_cast<KSVGScriptInterpreter *>(exec->interpreter())->attributeGetMode();
+
+// Sets the class specific flags to a ZERO value
+#define KSVG_EMPTY_FLAGS m_attrFlags = 0;
+
+// to be used in generatedata.cpp
+// GET p1=exec, p2=propertyName, p3=bridge
+// PUT p1=exec, p2=propertyName, p3=value, p4=attr
+#define GET_METHOD_ARGS KJS::ExecState *p1, const KJS::Identifier &p2, const KJS::ObjectImp *p3
+#define PUT_METHOD_ARGS KJS::ExecState *p1, const KJS::Identifier &p2, const KJS::Value &p3, int p4
+
+namespace KSVG
+{
+	/**
+	 * Helper method for property lookups
+	 *
+	 * This method does it all (looking in the hashtable, checking for function
+	 * overrides, creating the function or retrieving from cache, calling
+	 * getValueProperty in case of a non-function property, forwarding to parent[s] if
+	 * unknown property).
+	 *
+	 * Template arguments:
+	 * @param FuncImp the class which implements this object's functions
+	 * @param ThisImp the class of "this". It must implement the getValueProperty(exec,token) method,
+	 * for non-function properties, and the getInParents() method (auto-generated).
+	 *
+	 * Method arguments:
+	 * @param exec execution state, as usual
+	 * @param propertyName the property we're looking for
+	 * @param table the static hashtable for this class
+	 * @param thisObj "this"
+	 */
+	template<class FuncImp, class ThisImp>
+	inline KJS::Value lookupGet(KJS::ExecState *exec,
+								const KJS::Identifier &propertyName,
+								const KJS::HashTable *table,
+								const ThisImp *thisObj, // the 'impl' object
+								const KJS::ObjectImp *bridge)
+	{
+		const KJS::HashEntry *entry = KJS::Lookup::findEntry(table, propertyName);
+
+		if(!entry) // not found, forward to parents
+			return thisObj->getInParents(exec, propertyName, bridge);
+
+		if(entry->attr & KJS::Function)
+			return KJS::lookupOrCreateFunction<FuncImp>(exec, propertyName,
+														const_cast<KJS::ObjectImp *>(bridge),
+														entry->value, entry->params, entry->attr);
+
+		return thisObj->getValueProperty(exec, entry->value);
+    }
+
+	/**
+	 * Simplified version of lookupGet in case there are no functions, only "values".
+	 * Using this instead of lookupGet removes the need for a FuncImp class.
+	 */
+	template <class ThisImp>
+    inline KJS::Value lookupGetValue(KJS::ExecState *exec,
+									 const KJS::Identifier &propertyName,
+									 const KJS::HashTable *table,
+									 const ThisImp *thisObj, // the 'impl' object
+                                     const KJS::ObjectImp *bridge)
+	{
+		const KJS::HashEntry *entry = KJS::Lookup::findEntry(table, propertyName);
+
+		if(!entry) // not found, forward to parents
+			return thisObj->getInParents(exec, propertyName, bridge);
+
+		if(entry->attr & KJS::Function)
+			kdError(26004) << "Function bit set! Shouldn't happen in lookupGetValue! propertyName was " << propertyName.qstring() << endl;
+
+		return thisObj->getValueProperty(exec, entry->value);
+	}
+
+    /**
+	 * This one is for "put".
+	 * Lookup hash entry for property to be set, and set the value.
+	 * The "this" class must implement putValueProperty.
+	 * If it returns false, put() will return false, and KSVGRequest will set a dynamic property in ObjectImp
+	 */
+	template <class ThisImp>
+	inline bool lookupPut(KJS::ExecState *exec,
+						  const KJS::Identifier &propertyName,
+						  const KJS::Value &value,
+						  int attr,
+						  const KJS::HashTable *table,
+						  ThisImp *thisObj)
+    {
+		const KJS::HashEntry *entry = KJS::Lookup::findEntry(table, propertyName);
+
+		if(!entry) // not found, forward to parents
+			return thisObj->putInParents(exec, propertyName, value, attr);
+		else if(entry->attr & KJS::Function) // Function: put as override property
+			return false;
+		else if(entry->attr & KJS::ReadOnly && !(attr & KJS::Internal)) // readonly! Can't put!
+		{
+#ifdef KJS_VERBOSE
+			kdWarning(26004) <<" Attempt to change value of readonly property '" << propertyName.qstring() << "'" << endl;
+#endif
+			return true; // "we did it" -> don't put override property
+		}
+		else
+		{
+			if(static_cast<KSVGScriptInterpreter *>(exec->interpreter())->attributeSetMode())
+				thisObj->m_attrFlags |= (1 << entry->value);
+
+			thisObj->putValueProperty(exec, entry->value, value, attr);
+			return true;
+		}
+	}
+}
+
+// Same as kjs' DEFINE_PROTOTYPE, but with a pointer to the hashtable too, and no ClassName here
+// The ClassProto ctor(exec) must be public, so we can use KJS::cacheGlobalObject... (Niko)
+#define KSVG_DEFINE_PROTOTYPE(ClassProto) \
+  namespace KSVG { \
+  class ClassProto : public KJS::ObjectImp { \
+  public: \
+    static KJS::Object self(KJS::ExecState *exec); \
+    ClassProto( KJS::ExecState *exec ) \
+      : KJS::ObjectImp( exec->interpreter()->builtinObjectPrototype() ) {} \
+    virtual const KJS::ClassInfo *classInfo() const { return &info; } \
+    static const KJS::ClassInfo info; \
+    KJS::Value get(KJS::ExecState *exec, const KJS::Identifier &propertyName) const; \
+    bool hasProperty(KJS::ExecState *exec, const KJS::Identifier &propertyName) const; \
+    \
+    static const struct KJS::HashTable s_hashTable; \
+  }; \
+  };
+
+// same as IMPLEMENT_PROTOTYPE but in the KSVG namespace, and with ClassName here
+// so that KSVG_DEFINE_PROTOTYPE can be put in a header file ('info' defined here)
+#define KSVG_IMPLEMENT_PROTOTYPE(ClassName,ClassProto,ClassFunc) \
+    KJS::Value KSVG::ClassProto::get(KJS::ExecState *exec, const KJS::Identifier &propertyName) const \
+    { \
+      return lookupGetFunction<ClassFunc,KJS::ObjectImp>(exec, propertyName, &s_hashTable, this ); \
+    } \
+    bool KSVG::ClassProto::hasProperty(KJS::ExecState *exec, const KJS::Identifier &propertyName) const \
+    { /*stupid but we need this to have a common macro for the declaration*/ \
+      return KJS::ObjectImp::hasProperty(exec, propertyName); \
+    } \
+    KJS::Object KSVG::ClassProto::self(KJS::ExecState *exec) \
+    { \
+      return KJS::cacheGlobalObject<ClassProto>( exec, "[[" ClassName ".prototype]]" ); \
+    } \
+    const KJS::ClassInfo ClassProto::info = { ClassName, 0, &s_hashTable, 0 }; \
+
+// same as KSVG_IMPLEMENT_PROTOTYPE but with a parent class to forward calls to
+// Not used within KSVG up to now - each class does a self proto lookup in generateddata.cpp
+#define KSVG_IMPLEMENT_PROTOTYPE_WITH_PARENT(ClassName,ClassProto,ClassFunc,ParentProto) \
+    KJS::Value KSVG::ClassProto::get(KJS::ExecState *exec, const KJS::Identifier &propertyName) const \
+    { \
+      KJS::Value val = lookupGetFunction<ClassFunc,KJS::ObjectImp>(exec, propertyName, &s_hashTable, this ); \
+      if ( val.type() != UndefinedType ) return val; \
+      /* Not found -> forward request to "parent" prototype */ \
+      return ParentProto::self(exec).get( exec, propertyName ); \
+    } \
+    bool KSVG::ClassProto::hasProperty(KJS::ExecState *exec, const KJS::Identifier &propertyName) const \
+    { \
+      if (KJS::ObjectImp::hasProperty(exec, propertyName)) \
+        return true; \
+      return ParentProto::self(exec).hasProperty(exec, propertyName); \
+    } \
+    KJS::Object KSVG::ClassProto::self(KJS::ExecState *exec) \
+    { \
+      return KJS::cacheGlobalObject<ClassProto>( exec, "[[" ClassName ".prototype]]" ); \
+    } \
+    const KJS::ClassInfo ClassProto::info = { ClassName, 0, &s_hashTable, 0 }; \
+
+#define KSVG_IMPLEMENT_PROTOFUNC(ClassFunc,Class) \
+  namespace KSVG { \
+  class ClassFunc : public KJS::ObjectImp { \
+  public: \
+    ClassFunc(KJS::ExecState *exec, int i, int len) \
+       : KJS::ObjectImp( /*proto? */ ), id(i) { \
+       KJS::Value protect(this); \
+       put(exec,"length",KJS::Number(len),KJS::DontDelete|KJS::ReadOnly|KJS::DontEnum); \
+    } \
+    /** Used by call() to check the type of thisObj. Generated code */ \
+    Class * cast(const KJS::ObjectImp* bridge) const; \
+    \
+    virtual bool implementsCall() const { return true; } \
+    /** You need to implement that one */ \
+    virtual KJS::Value call(KJS::ExecState *exec, KJS::Object &thisObj, const KJS::List &args); \
+  private: \
+    int id; \
+  }; \
+  };
+
+// To be used when casting the type of an argument
+#define KSVG_CHECK(ClassName, theObj) \
+    ClassName* obj = cast(static_cast<KJS::ObjectImp*>(theObj.imp())); \
+    if (!obj) { \
+        kdDebug(26004) << k_funcinfo << " Wrong object type: expected " << ClassName::s_classInfo.className << " got " << thisObj.classInfo()->className << endl; \
+        Object err = Error::create(exec,TypeError);   \
+        exec->setException(err);                      \
+        return err;                                   \
+    }
+
+// To be used in all call() implementations!
+// Can't use if (!thisObj.inherits(&ClassName::s_classInfo) since we don't
+// use the (single-parent) inheritance of ClassInfo...
+#define KSVG_CHECK_THIS(ClassName) KSVG_CHECK(ClassName, thisObj)
+
+#endif
+
+// vim:ts=4:noet
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/ecma/.#ksvg_scriptinterpreter.h.1.12 kdegraphics-3.2.3/ksvg/ecma/.#ksvg_scriptinterpreter.h.1.12
--- kdegraphics-3.2.3/ksvg.orig/ecma/.#ksvg_scriptinterpreter.h.1.12	1970-01-01 01:00:00.000000000 +0100
+++ kdegraphics-3.2.3/ksvg/ecma/.#ksvg_scriptinterpreter.h.1.12	2004-06-11 22:41:43.000000000 +0200
@@ -0,0 +1,110 @@
+/*
+    Copyright (C) 2002-2003 KSVG Team
+	This file is part of the KDE project
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+    Boston, MA 02111-1307, USA.
+*/
+
+#ifndef KSVGScriptInterpreter_H
+#define KSVGScriptInterpreter_H
+
+#include <qptrdict.h>
+
+#include "ksvg_bridge.h"
+
+namespace KJS
+{
+	class Value;
+	class Object;
+	class Interpreter;
+};
+
+namespace KSVG
+{
+	class SVGEventImpl;
+	class SVGDocumentImpl;
+};
+
+class KSVGScriptInterpreter : public KJS::Interpreter
+{
+public:
+	KSVGScriptInterpreter(const KJS::Object &global, KSVG::SVGDocumentImpl *doc);
+	virtual ~KSVGScriptInterpreter();
+
+	KSVG::SVGDocumentImpl *document();
+
+	KJS::ObjectImp *getDOMObject(void *objectHandle) const;
+	void putDOMObject(void *objectHandle, KJS::ObjectImp *obj);
+	void removeDOMObject(void *objectHandle);
+
+	KSVG::SVGEventImpl *currentEvent();
+	void setCurrentEvent(KSVG::SVGEventImpl *evt);
+
+	bool attributeGetMode();
+	void setAttributeGetMode(bool temp);
+
+	bool attributeSetMode();
+	void setAttributeSetMode(bool temp);
+
+private:
+	KSVG::SVGDocumentImpl *m_document;
+	KSVG::SVGEventImpl *m_evt;
+	
+	bool m_attributeGetMode, m_attributeSetMode;
+	
+	QPtrDict<KJS::ObjectImp> m_domObjects;
+};
+
+// Lookup or create JS object around an existing "DOM Object"
+template<class DOMObj, class KJSDOMObj>
+inline KJS::Value cacheDOMObject(KJS::ExecState *exec, DOMObj *domObj)
+{
+	KJS::ObjectImp *ret;
+	if(!domObj)
+		return KJS::Null();
+
+	KSVGScriptInterpreter *interp = static_cast<KSVGScriptInterpreter *>(exec->interpreter());
+	if((ret = interp->getDOMObject(domObj)))
+		return KJS::Value(ret);
+	else
+	{
+		ret = new KJSDOMObj(exec, domObj);
+		interp->putDOMObject(domObj, ret);
+		return KJS::Value(ret);
+	}
+}
+
+// Lookup or create singleton Impl object, and return a unique bridge object for it.
+// (Very much like KJS::cacheGlobalObject, which is for a singleton ObjectImp)
+// This one is mostly used for Constructor objects.
+template <class ClassCtor>
+inline KJS::Object cacheGlobalBridge(KJS::ExecState *exec, const KJS::Identifier &propertyName)
+{
+	KJS::ValueImp *obj = static_cast<KJS::ObjectImp*>(exec->interpreter()->globalObject().imp())->getDirect(propertyName);
+	if(obj)
+		return KJS::Object::dynamicCast(KJS::Value(obj));
+	else
+	{
+		ClassCtor* ctor = new ClassCtor(exec); // create the ClassCtor instance
+		KJS::Object newObject(new KSVGBridge<ClassCtor>(exec, ctor)); // create the bridge around it
+		exec->interpreter()->globalObject().put(exec, propertyName, newObject, KJS::Internal);
+		return newObject;
+	}
+}
+
+#endif
+
+// vim:ts=4:noet
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/ecma/ksvg_bridge.h kdegraphics-3.2.3/ksvg/ecma/ksvg_bridge.h
--- kdegraphics-3.2.3/ksvg.orig/ecma/ksvg_bridge.h	2004-06-11 22:42:01.956057992 +0200
+++ kdegraphics-3.2.3/ksvg/ecma/ksvg_bridge.h	2004-06-11 22:43:00.692128752 +0200
@@ -90,7 +90,7 @@
 //			kdDebug(26004) << "KSVGBridge::put(), " << propertyName.qstring() << " Name: " << classInfo()->className << " Object: " << m_impl << endl;
 
 		// Try to see if we know this property (and need to take special action)
-		if(m_impl->put(exec, propertyName, value, attr))
+      if(this->m_impl->put(exec, propertyName, value, attr))
 			return;
 
 		// We don't -> set property in ObjectImp.
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/ecma/ksvg_cacheimpl.h kdegraphics-3.2.3/ksvg/ecma/ksvg_cacheimpl.h
--- kdegraphics-3.2.3/ksvg.orig/ecma/ksvg_cacheimpl.h	1970-01-01 01:00:00.000000000 +0100
+++ kdegraphics-3.2.3/ksvg/ecma/ksvg_cacheimpl.h	2004-05-01 17:17:46.000000000 +0200
@@ -0,0 +1,65 @@
+/*
+    Copyright (C) 2002-2003 KSVG Team
+   This file is part of the KDE project
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+    Boston, MA 02111-1307, USA.
+*/
+
+#ifndef KSVGCacheImpl_H
+#define KSVGCacheImpl_H
+
+#include "ksvg_scriptinterpreter.h"
+
+// Lookup or create JS object around an existing "DOM Object"
+template<class DOMObj, class KJSDOMObj>
+inline KJS::Value cacheDOMObject(KJS::ExecState *exec, DOMObj *domObj)
+{
+   KJS::ObjectImp *ret;
+   if(!domObj)
+      return KJS::Null();
+
+   KSVGScriptInterpreter *interp = static_cast<KSVGScriptInterpreter *>(exec->interpreter());
+   if((ret = interp->getDOMObject(domObj)))
+      return KJS::Value(ret);
+   else
+   {
+      ret = new KJSDOMObj(exec, domObj);
+      interp->putDOMObject(domObj, ret);
+      return KJS::Value(ret);
+   }
+}
+
+// Lookup or create singleton Impl object, and return a unique bridge object for it.
+// (Very much like KJS::cacheGlobalObject, which is for a singleton ObjectImp)
+// This one is mostly used for Constructor objects.
+template <class ClassCtor>
+inline KJS::Object cacheGlobalBridge(KJS::ExecState *exec, const KJS::Identifier &propertyName)
+{
+   KJS::ValueImp *obj = static_cast<KJS::ObjectImp*>(exec->interpreter()->globalObject().imp())->getDirect(propertyName);
+   if(obj)
+      return KJS::Object::dynamicCast(KJS::Value(obj));
+   else
+   {
+      ClassCtor* ctor = new ClassCtor(exec); // create the ClassCtor instance
+      KJS::Object newObject(new KSVGBridge<ClassCtor>(exec, ctor)); // create the bridge around it
+      exec->interpreter()->globalObject().put(exec, propertyName, newObject, KJS::Internal);
+      return newObject;
+   }
+}
+
+#endif
+
+// vim:ts=4:noet
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/ecma/ksvg_lookup.h kdegraphics-3.2.3/ksvg/ecma/ksvg_lookup.h
--- kdegraphics-3.2.3/ksvg.orig/ecma/ksvg_lookup.h	2004-06-11 22:42:01.958057688 +0200
+++ kdegraphics-3.2.3/ksvg/ecma/ksvg_lookup.h	2004-06-11 22:43:00.600142736 +0200
@@ -26,7 +26,8 @@
 #include <kjs/interpreter.h> // for ExecState
 #include "ksvg_scriptinterpreter.h"
 
-class KSVGScriptInterpreter;
+#include "ksvg_bridge.h"
+#include "ksvg_scriptinterpreter.h"
 
 #define KSVG_GET_COMMON \
 public: \
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/ecma/ksvg_scriptinterpreter.h kdegraphics-3.2.3/ksvg/ecma/ksvg_scriptinterpreter.h
--- kdegraphics-3.2.3/ksvg.orig/ecma/ksvg_scriptinterpreter.h	2004-06-11 22:42:01.959057536 +0200
+++ kdegraphics-3.2.3/ksvg/ecma/ksvg_scriptinterpreter.h	2004-06-11 22:43:32.713260800 +0200
@@ -23,8 +23,6 @@
 
 #include <qptrdict.h>
 
-#include "ksvg_bridge.h"
-
 namespace KJS
 {
 	class Value;
@@ -68,43 +66,6 @@
 	QPtrDict<KJS::ObjectImp> m_domObjects;
 };
 
-// Lookup or create JS object around an existing "DOM Object"
-template<class DOMObj, class KJSDOMObj>
-inline KJS::Value cacheDOMObject(KJS::ExecState *exec, DOMObj *domObj)
-{
-	KJS::ObjectImp *ret;
-	if(!domObj)
-		return KJS::Null();
-
-	KSVGScriptInterpreter *interp = static_cast<KSVGScriptInterpreter *>(exec->interpreter());
-	if((ret = interp->getDOMObject(domObj)))
-		return KJS::Value(ret);
-	else
-	{
-		ret = new KJSDOMObj(exec, domObj);
-		interp->putDOMObject(domObj, ret);
-		return KJS::Value(ret);
-	}
-}
-
-// Lookup or create singleton Impl object, and return a unique bridge object for it.
-// (Very much like KJS::cacheGlobalObject, which is for a singleton ObjectImp)
-// This one is mostly used for Constructor objects.
-template <class ClassCtor>
-inline KJS::Object cacheGlobalBridge(KJS::ExecState *exec, const KJS::Identifier &propertyName)
-{
-	KJS::ValueImp *obj = static_cast<KJS::ObjectImp*>(exec->interpreter()->globalObject().imp())->getDirect(propertyName);
-	if(obj)
-		return KJS::Object::dynamicCast(KJS::Value(obj));
-	else
-	{
-		ClassCtor* ctor = new ClassCtor(exec); // create the ClassCtor instance
-		KJS::Object newObject(new KSVGBridge<ClassCtor>(exec, ctor)); // create the bridge around it
-		exec->interpreter()->globalObject().put(exec, propertyName, newObject, KJS::Internal);
-		return newObject;
-	}
-}
-
 #endif
 
 // vim:ts=4:noet
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/SVGAngleImpl.cc kdegraphics-3.2.3/ksvg/impl/SVGAngleImpl.cc
--- kdegraphics-3.2.3/ksvg.orig/impl/SVGAngleImpl.cc	2004-06-11 22:42:02.065041424 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGAngleImpl.cc	2004-06-11 22:49:42.560035544 +0200
@@ -29,6 +29,7 @@
 #include "SVGAngleImpl.lut.h"
 #include "ksvg_scriptinterpreter.h"
 #include "ksvg_bridge.h"
+#include "ksvg_cacheimpl.h"
 
 const double deg2rad = 0.017453292519943295769; // pi/180
 const double deg2grad = 400.0 / 360.0;
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/SVGColorImpl.cc kdegraphics-3.2.3/ksvg/impl/SVGColorImpl.cc
--- kdegraphics-3.2.3/ksvg.orig/impl/SVGColorImpl.cc	2004-06-11 22:42:02.039045376 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGColorImpl.cc	2004-06-11 22:49:42.643022928 +0200
@@ -38,6 +38,7 @@
 #include "SVGColorImpl.lut.h"
 #include "ksvg_scriptinterpreter.h"
 #include "ksvg_bridge.h"
+#include "ksvg_cacheimpl.h"
 
 SVGColorImpl::SVGColorImpl(SVGElementImpl *object) : m_object(object)
 {
@@ -478,7 +479,9 @@
 	{
 		case ColorType:
 			return Number(colorType());
+#ifdef __GNUC__
 #warning FIXME bridge stuff
+#endif
 		case RGBColor:
 			return Undefined();
 		case ICCColor:		
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/SVGEllipseElementImpl.cc kdegraphics-3.2.3/ksvg/impl/SVGEllipseElementImpl.cc
--- kdegraphics-3.2.3/ksvg.orig/impl/SVGEllipseElementImpl.cc	2004-06-11 22:42:02.016048872 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGEllipseElementImpl.cc	2004-06-11 22:49:42.511042992 +0200
@@ -49,11 +49,11 @@
 	m_cy->ref();
 	m_cy->baseVal()->setValueAsString("-1");
 
-	m_rx = new SVGAnimatedLengthImpl(LENGTHMODE_OTHER, this);
+	m_rx = new SVGAnimatedLengthImpl(LENGTHMODE_WIDTH, this);
 	m_rx->ref();
 	m_rx->baseVal()->setValueAsString("-1");
 
-	m_ry = new SVGAnimatedLengthImpl(LENGTHMODE_OTHER, this);
+	m_ry = new SVGAnimatedLengthImpl(LENGTHMODE_HEIGHT, this);
 	m_ry->ref();
 	m_ry->baseVal()->setValueAsString("-1");
 }
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/SVGGradientElementImpl.cc kdegraphics-3.2.3/ksvg/impl/SVGGradientElementImpl.cc
--- kdegraphics-3.2.3/ksvg.orig/impl/SVGGradientElementImpl.cc	2004-06-11 22:42:02.019048416 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGGradientElementImpl.cc	2004-06-11 22:49:42.652021560 +0200
@@ -39,6 +39,7 @@
 #include "ksvg_scriptinterpreter.h"
 #include "ksvg_bridge.h"
 #include "ksvg_ecma.h"
+#include "ksvg_cacheimpl.h"
 
 SVGGradientElementImpl::SVGGradientElementImpl(DOM::ElementImpl *impl) : SVGElementImpl(impl), SVGURIReferenceImpl(), SVGExternalResourcesRequiredImpl(), SVGStylableImpl(this), SVGPaintServerImpl()
 {
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/SVGHelperImpl.h kdegraphics-3.2.3/ksvg/impl/SVGHelperImpl.h
--- kdegraphics-3.2.3/ksvg.orig/impl/SVGHelperImpl.h	2004-06-11 22:42:02.097036560 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGHelperImpl.h	2004-06-11 22:49:42.665019584 +0200
@@ -23,6 +23,7 @@
 
 #include <dom/dom_element.h>
 
+#include "SVGElementImpl.h"
 #include "SVGLengthImpl.h"
 
 #include "ksvg_lookup.h"
@@ -32,11 +33,10 @@
 
 namespace KSVG
 {
-
-class SVGElementImpl;
 class SVGStringListImpl;
 class SVGTransformListImpl;
 class SVGAnimatedLengthListImpl;
+
 class SVGHelperImpl
 {
 public:
@@ -56,7 +56,7 @@
 		{
 			T *cast = dynamic_cast<T *>(element->ownerDoc()->getElementFromHandle(node.handle()));
 			if(cast)
-				cast->putValueProperty(element->ownerDoc()->ecmaEngine()->globalExec(), token, KJS::String(value), Internal);
+				cast->putValueProperty(element->ownerDoc()->ecmaEngine()->globalExec(), token, KJS::String(value), KJS::Internal);
 		}
 	}
 
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/SVGLengthImpl.cc kdegraphics-3.2.3/ksvg/impl/SVGLengthImpl.cc
--- kdegraphics-3.2.3/ksvg.orig/impl/SVGLengthImpl.cc	2004-06-11 22:42:02.030046744 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGLengthImpl.cc	2004-06-11 22:49:42.546037672 +0200
@@ -45,6 +45,7 @@
 #include "SVGLengthImpl.lut.h"
 #include "ksvg_scriptinterpreter.h"
 #include "ksvg_bridge.h"
+#include "ksvg_cacheimpl.h"
 
 // keep track of textual description of the unit type
 QString UnitText[] =
@@ -77,8 +78,10 @@
 	{
 		if(m_mode == LENGTHMODE_WIDTH)
 			return 25.4 * m_context->ownerDoc()->screenPixelsPerMillimeterX();
-		if(m_mode == LENGTHMODE_HEIGHT)
+		else if(m_mode == LENGTHMODE_HEIGHT)
 			return 25.4 * m_context->ownerDoc()->screenPixelsPerMillimeterY();
+		else if(m_mode == LENGTHMODE_OTHER)
+			return 25.4 * m_context->ownerDoc()->screenPixelsPerMillimeterX();
 	}
 	return 90.0;
 }
@@ -120,7 +123,7 @@
 			else if(m_mode == LENGTHMODE_HEIGHT)
 				result = value * bbox->height();
 			else if(m_mode == LENGTHMODE_OTHER)
-				result = value * sqrt(pow(bbox->width(), 2) + pow(bbox->height(), 2)) / sqrt(2);
+				result = value * sqrt(pow(bbox->width(), 2) + pow(bbox->height(), 2)) / sqrt(2.0);
 
 			bbox->deref();
 			return result;
@@ -378,7 +381,7 @@
 		else if(m_mode == LENGTHMODE_HEIGHT)
 			return value * height;
 		else if(m_mode == LENGTHMODE_OTHER)
-			return value * sqrt(pow(width, 2) + pow(height, 2)) / sqrt(2);
+			return value * sqrt(pow(width, 2) + pow(height, 2)) / sqrt(2.0);
 	}
 	else if(m_context == m_context->ownerDoc()->rootElement())
 	{
@@ -392,7 +395,7 @@
 		else if(m_mode == LENGTHMODE_HEIGHT)
 			return value * metrics.height();
 		else if(m_mode == LENGTHMODE_OTHER)
-			return value * sqrt(pow(metrics.width(), 2) + pow(metrics.height(), 2)) / sqrt(2);
+			return value * sqrt(pow(metrics.width(), 2) + pow(metrics.height(), 2)) / sqrt(2.0);
 	}
 
 	return 0;
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/SVGMarkerElementImpl.cc kdegraphics-3.2.3/ksvg/impl/SVGMarkerElementImpl.cc
--- kdegraphics-3.2.3/ksvg.orig/impl/SVGMarkerElementImpl.cc	2004-06-11 22:42:02.038045528 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGMarkerElementImpl.cc	2004-06-11 22:49:42.679017456 +0200
@@ -44,6 +44,7 @@
 #include "ksvg_scriptinterpreter.h"
 #include "ksvg_bridge.h"
 #include "ksvg_ecma.h"
+#include "ksvg_cacheimpl.h"
 
 SVGMarkerElementImpl::SVGMarkerElementImpl(DOM::ElementImpl *impl) : SVGContainerImpl(impl), SVGLangSpaceImpl(), SVGExternalResourcesRequiredImpl(), SVGStylableImpl(this), SVGFitToViewBoxImpl()
 {
@@ -378,7 +379,9 @@
  		case SVGMarkerElementImpl::SetOrientToAuto:
 			obj->setOrientToAuto();
  			return Undefined();
+#ifdef __GNUC__
 #warning FIXME cache stuff
+#endif
  		case SVGMarkerElementImpl::SetOrientToAngle:
 			obj->setOrientToAngle(static_cast<KSVGBridge<SVGAngleImpl> *>(args[0].imp())->impl());
  			return Undefined();
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/SVGPaintImpl.cc kdegraphics-3.2.3/ksvg/impl/SVGPaintImpl.cc
--- kdegraphics-3.2.3/ksvg.orig/impl/SVGPaintImpl.cc	2004-06-11 22:42:02.095036864 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGPaintImpl.cc	2004-06-11 22:49:42.747007120 +0200
@@ -30,6 +30,7 @@
 #include "SVGPaintImpl.lut.h"
 #include "ksvg_scriptinterpreter.h"
 #include "ksvg_bridge.h"
+#include "ksvg_cacheimpl.h"
 
 SVGPaintImpl::SVGPaintImpl(SVGElementImpl *object) : SVGColorImpl(object)
 {
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/SVGPathSegImpl.cc kdegraphics-3.2.3/ksvg/impl/SVGPathSegImpl.cc
--- kdegraphics-3.2.3/ksvg.orig/impl/SVGPathSegImpl.cc	2004-06-11 22:42:02.095036864 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGPathSegImpl.cc	2004-06-11 22:49:42.765004384 +0200
@@ -26,6 +26,7 @@
 
 #include "SVGPathSegImpl.lut.h"
 #include "ksvg_scriptinterpreter.h"
+#include "ksvg_cacheimpl.h"
 
 SVGPathSegImpl::SVGPathSegImpl()
 {
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/SVGPreserveAspectRatioImpl.cc kdegraphics-3.2.3/ksvg/impl/SVGPreserveAspectRatioImpl.cc
--- kdegraphics-3.2.3/ksvg.orig/impl/SVGPreserveAspectRatioImpl.cc	2004-06-11 22:42:02.017048720 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGPreserveAspectRatioImpl.cc	2004-06-11 22:49:42.774003016 +0200
@@ -34,6 +34,7 @@
 #include "SVGPreserveAspectRatioImpl.lut.h"
 #include "ksvg_scriptinterpreter.h"
 #include "ksvg_bridge.h"
+#include "ksvg_cacheimpl.h"
 
 SVGPreserveAspectRatioImpl::SVGPreserveAspectRatioImpl()
 {
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/SVGTextContentElementImpl.cc kdegraphics-3.2.3/ksvg/impl/SVGTextContentElementImpl.cc
--- kdegraphics-3.2.3/ksvg.orig/impl/SVGTextContentElementImpl.cc	2004-06-11 22:42:02.074040056 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGTextContentElementImpl.cc	2004-06-11 22:49:42.805998152 +0200
@@ -34,6 +34,7 @@
 
 #include "SVGTextContentElementImpl.lut.h"
 #include "ksvg_scriptinterpreter.h"
+#include "ksvg_cacheimpl.h"
 
 SVGTextContentElementImpl::SVGTextContentElementImpl(DOM::ElementImpl *impl) : SVGShapeImpl(impl), SVGTestsImpl(), SVGLangSpaceImpl(), SVGExternalResourcesRequiredImpl(), SVGStylableImpl(this)
 {
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/SVGTextPathElementImpl.cc kdegraphics-3.2.3/ksvg/impl/SVGTextPathElementImpl.cc
--- kdegraphics-3.2.3/ksvg.orig/impl/SVGTextPathElementImpl.cc	2004-06-11 22:42:02.076039752 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGTextPathElementImpl.cc	2004-06-11 22:49:42.813996936 +0200
@@ -34,6 +34,7 @@
 #include "SVGTextPathElementImpl.lut.h"
 #include "ksvg_scriptinterpreter.h"
 #include "ksvg_ecma.h"
+#include "ksvg_cacheimpl.h"
 
 SVGTextPathElementImpl::SVGTextPathElementImpl(DOM::ElementImpl *impl) : SVGTextContentElementImpl(impl), SVGURIReferenceImpl()
 {
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/SVGTransformImpl.cc kdegraphics-3.2.3/ksvg/impl/SVGTransformImpl.cc
--- kdegraphics-3.2.3/ksvg.orig/impl/SVGTransformImpl.cc	2004-06-11 22:42:02.016048872 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGTransformImpl.cc	2004-06-11 22:49:42.831994200 +0200
@@ -31,6 +31,7 @@
 #include "SVGTransformImpl.lut.h"
 #include "ksvg_scriptinterpreter.h"
 #include "ksvg_bridge.h"
+#include "ksvg_cacheimpl.h"
 
 SVGTransformImpl::SVGTransformImpl()
 {
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/SVGZoomAndPanImpl.cc kdegraphics-3.2.3/ksvg/impl/SVGZoomAndPanImpl.cc
--- kdegraphics-3.2.3/ksvg.orig/impl/SVGZoomAndPanImpl.cc	2004-06-11 22:42:02.096036712 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGZoomAndPanImpl.cc	2004-06-11 22:49:42.853990856 +0200
@@ -28,6 +28,7 @@
 #include "SVGZoomAndPanImpl.lut.h"
 #include "ksvg_scriptinterpreter.h"
 #include "ksvg_bridge.h"
+#include "ksvg_cacheimpl.h"
 
 SVGZoomAndPanImpl::SVGZoomAndPanImpl()
 {
diff -urN -x CVS kdegraphics-3.2.3/ksvg.orig/impl/generateddata.cpp kdegraphics-3.2.3/ksvg/impl/generateddata.cpp
--- kdegraphics-3.2.3/ksvg.orig/impl/generateddata.cpp	2004-06-11 22:42:02.092037320 +0200
+++ kdegraphics-3.2.3/ksvg/impl/generateddata.cpp	2004-06-11 22:49:43.001968360 +0200
@@ -161,6 +161,8 @@
 using namespace KSVG;
 using namespace KJS;
 
+#include "ksvg_cacheimpl.h"
+
 // For all classes with generated data: the ClassInfo
 const DOM::DOMString SVGAElementImpl::s_tagName = "a";
 const ClassInfo SVGAElementImpl::s_classInfo = {"KSVG::SVGAElementImpl",0,&SVGAElementImpl::s_hashTable,0};
