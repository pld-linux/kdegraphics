diff -urN -x CVS kdegraphics.orig/kdvi/TeXFontDefinition.cpp kdegraphics/kdvi/TeXFontDefinition.cpp
--- kdegraphics.orig/kdvi/TeXFontDefinition.cpp	Sat Mar 27 11:56:15 2004
+++ kdegraphics/kdvi/TeXFontDefinition.cpp	Tue Oct  5 14:21:21 2004
@@ -1,4 +1,4 @@
-// $Id$
+// $Id$
 
 #include <kdebug.h>
 #include <klocale.h>
@@ -155,7 +155,7 @@
 #ifdef DEBUG_FONT
     kdDebug(4300) << "Font " << fontname << " uses encoding " << enc << endl;
 #endif
-    font = new TeXFont_PFB(this, font_pool->encodingPool.findByName(enc) );
+    font = new TeXFont_PFB(this, font_pool->encodingPool.findByName(enc), font_pool->fontsByTeXName.findSlant(fontname) );
   } else {
 #ifdef DEBUG_FONT
     kdDebug(4300) << "Font " << fontname << " does not have an encoding." << endl;
diff -urN -x CVS kdegraphics.orig/kdvi/TeXFont_PFB.cpp kdegraphics/kdvi/TeXFont_PFB.cpp
--- kdegraphics.orig/kdvi/TeXFont_PFB.cpp	Fri Mar 26 09:13:06 2004
+++ kdegraphics/kdvi/TeXFont_PFB.cpp	Tue Oct  5 14:21:21 2004
@@ -24,7 +24,7 @@
 //#define DEBUG_PFB 1
 
 
-TeXFont_PFB::TeXFont_PFB(TeXFontDefinition *parent, fontEncoding *enc) 
+TeXFont_PFB::TeXFont_PFB(TeXFontDefinition *parent, fontEncoding *enc, double slant)
   : TeXFont(parent)
 {
 #ifdef DEBUG_PFB
@@ -51,6 +51,18 @@
       return;
     }
 
+  // Take care of slanting, and transform all characters in the font, if necessary.
+  if (slant != 0.0) {
+    // Construct a transformation matrix for vertical shear which will
+    // be used to transform the characters.
+    transformationMatrix.xx = 0x10000;
+    transformationMatrix.xy = (FT_Fixed)(slant * 0x10000);
+    transformationMatrix.yx = 0;
+    transformationMatrix.yy = 0x10000;
+    
+    FT_Set_Transform( face, &transformationMatrix, 0);
+  }
+  
   if (face->family_name != 0)
     parent->fullFontName = face->family_name;
 
diff -urN -x CVS kdegraphics.orig/kdvi/TeXFont_PFB.h kdegraphics/kdvi/TeXFont_PFB.h
--- kdegraphics.orig/kdvi/TeXFont_PFB.h	Mon Jan 12 16:37:41 2004
+++ kdegraphics/kdvi/TeXFont_PFB.h	Tue Oct  5 14:21:21 2004
@@ -26,7 +26,7 @@
 
 class TeXFont_PFB : public TeXFont {
  public:
-  TeXFont_PFB(TeXFontDefinition *parent, fontEncoding *enc=0);
+  TeXFont_PFB(TeXFontDefinition *parent, fontEncoding *enc=0, double slant=0.0 );
   ~TeXFont_PFB();
   
   glyph *getGlyph(Q_UINT16 character, bool generateCharacterPixmap=false, QColor color=Qt::black);
@@ -35,6 +35,10 @@
   FT_Face       face;
   bool          fatalErrorInFontLoading;
   Q_UINT16      charMap[256];
+
+  // This matrix is used internally to describes the slant, if
+  // nonzero. Otherwise, this is undefined.
+  FT_Matrix     transformationMatrix;
 };
 
 #endif
diff -urN -x CVS kdegraphics.orig/kdvi/fontMap.cpp kdegraphics/kdvi/fontMap.cpp
--- kdegraphics.orig/kdvi/fontMap.cpp	Tue Mar 16 20:39:54 2004
+++ kdegraphics/kdvi/fontMap.cpp	Tue Oct  5 14:21:21 2004
@@ -54,8 +54,18 @@
       QString fontFileName = line.section('<', -1).stripWhiteSpace().section(' ', 0, 0);
       QString encodingName = line.section('<', -2, -2).stripWhiteSpace().section(' ', 0, 0);
       
+      double slant = 0.0;
+      int i = line.find("SlantFont");
+      if (i >= 0) {
+	bool ok;
+	slant = line.left(i).section(' ', -1, -1 ,QString::SectionSkipEmpty).toDouble(&ok);
+	if (ok == false)
+	  slant = 0.0;
+      }
+      
       fontMapEntry &entry = fontMapEntries[TeXName];
       
+      entry.slant        = slant;
       entry.fontFileName = fontFileName;
       entry.fullFontName = FullName;
       if (encodingName.endsWith(".enc"))
@@ -112,4 +122,15 @@
     return QString::null;
 }
 
+
+double fontMap::findSlant(const QString &TeXName)
+{
+  QMap<QString, fontMapEntry>::Iterator it = fontMapEntries.find(TeXName);
+  
+  if (it != fontMapEntries.end())
+    return it.data().slant;
+  else
+    return 0.0;
+}
+
 #endif // HAVE_FREETYPE
diff -urN -x CVS kdegraphics.orig/kdvi/fontMap.h kdegraphics/kdvi/fontMap.h
--- kdegraphics.orig/kdvi/fontMap.h	Sat Jul 26 14:55:53 2003
+++ kdegraphics/kdvi/fontMap.h	Tue Oct  5 14:21:21 2004
@@ -39,6 +39,11 @@
   // (on the author's machine: /usr/share/texmf/dvips/psnfss/8r.enc)
   // must be looked up using the kpsewhich comman.
   QString fontEncoding;
+
+  // Some fonts need to be slanted, and the font map file defines by
+  // how much. This field is set to 0.0 if no slanting is specified in
+  // the map file.
+  double slant;
 };
 
 
@@ -101,6 +106,10 @@
       TeX font name (e.g. 'rpbkd'). This method return a reference to
       QString::null if the font could not be found. */
   const QString &findEncoding(const QString &TeXName);
+
+  /** This method finds the slant of a font. Returns 0.0 if no slant
+      was defined. */
+  double findSlant(const QString &TeXName);
   
  private:
   /** This member maps TeX font names mapEntry classes that contain
diff -urN -x CVS kdegraphics.orig/kdvi/kdvi_multipage.cpp kdegraphics/kdvi/kdvi_multipage.cpp
--- kdegraphics.orig/kdvi/kdvi_multipage.cpp	Wed Aug 25 20:04:25 2004
+++ kdegraphics/kdvi/kdvi_multipage.cpp	Wed Oct 13 14:27:04 2004
@@ -213,14 +213,38 @@
 #ifdef KDVI_MULTIPAGE_DEBUG
   kdDebug(4300) << "KDVIMultiPage::generateDocumentWidgets(void) called" << endl;
 #endif
+
+  // Find the number of the current page, for later use. If
+  // window->totalPages()>0, make sure that currPg is in the
+  // permissible range.
+  Q_UINT16 currPg = getCurrentPageNumber();
+  if (currPg > window->totalPages())
+    currPg = window->totalPages();
+  if (currPg < 1)
+    currPg = 1;
   
+  // Find out how many widgets are needed, and resize the widgetList
+  // accordingly
   widgetList.setAutoDelete(true);
-  if (viewModeAction->currentItem() == KVS_SinglePage)
-    widgetList.resize(1);
+  Q_UINT16 oldwidgetListSize = widgetList.size();
+  if (window->totalPages() == 0)
+    widgetList.resize(0);
   else
-    widgetList.resize(window->totalPages());
+    if (viewModeAction->currentItem() == KVS_SinglePage)
+      widgetList.resize(1);
+    else
+      widgetList.resize(window->totalPages());
+  bool isWidgetListResized = (widgetList.size() != oldwidgetListSize);
   widgetList.setAutoDelete(false);
-
+  
+  // If the widgetList is empty, there is nothing left to do.
+  if (widgetList.size() == 0) {
+    scrollView()->addChild(&widgetList);
+    return;
+  }
+  
+  // Allocate documentWidget structures so that all entries of
+  // widgetList point to a valid documentWidget
   documentWidget *dviWidget;
   for(Q_UINT16 i=0; i<widgetList.size(); i++) {
     dviWidget = (documentWidget *)(widgetList[i]);
@@ -234,11 +258,52 @@
       connect(dviWidget, SIGNAL(SRCLink(const QString&,QMouseEvent *, documentWidget *)), window,
 	      SLOT(handleSRCLink(const QString &,QMouseEvent *, documentWidget *)));
       connect(dviWidget, SIGNAL( setStatusBarText( const QString& ) ), this, SIGNAL( setStatusBarText( const QString& ) ) );
-    } else
-      dviWidget->setPageNumber(i+1);
+    }
+    else
+      if (viewModeAction->currentItem() == KVS_SinglePage)
+	dviWidget->update();
+      else
+	dviWidget->setPageNumber(i+1);
   }
 
+  // Set the page numbers for the newly allocated widgets. How this is
+  // done depends on the viewMode.
+  if (viewModeAction->currentItem() == KVS_SinglePage) {
+    // In KVS_SinglePage mode, any number between 1 and the maximum
+    // number of pages is acceptable. If an acceptable value is found,
+    // nothing is done, and otherwise '1' is set as a default.
+    dviWidget = (documentWidget *)(widgetList[0]);
+    if (dviWidget != 0) { // Paranoia safety check
+      dviWidget->setPageNumber(currPg);
+      dviWidget->update();
+    } else
+      kdError(4300) << "Zero-Pointer in widgetList in KDVIMultiPage::generateDocumentWidgets()" << endl;
+  } else {
+    // In all other modes, the widgets will be numbered continuously,
+    // starting from 1.
+    for(Q_UINT16 i=0; i<widgetList.size(); i++) {
+      dviWidget = (documentWidget *)(widgetList[i]);
+      if (dviWidget != 0) // Paranoia safety check
+	dviWidget->setPageNumber(i+1);
+      else
+	kdError(4300) << "Zero-Pointer in widgetList in KDVIMultiPage::generateDocumentWidgets()" << endl;
+    }
+  }
+  
+  // Make the changes in the widgetList known to the scrollview. so
+  // that the scrollview may update its contents.
   scrollView()->addChild(&widgetList);
+
+  // If the number of widgets has changed, the widget that displays
+  // 'currPg' may not be visible anymore. Bring it back into focus.
+  if (isWidgetListResized == true)
+    gotoPage(currPg-1);
+
+  // The layout of the widgets, the number of the widgets, and the
+  // "current" widget, i.e. the topmost visible widget might all have
+  // changed. Pass that information on.
+  emit pageInfo(window->totalPages(), getCurrentPageNumber()-1 );
+
 #ifdef KDVI_MULTIPAGE_DEBUG
   kdDebug(4300) << "KDVIMultiPage::generateDocumentWidgets(void) ended" << endl;
 #endif
@@ -256,11 +321,24 @@
     config->sync();
   }
 
+  // We save the current page and restore it later. That way the user
+  // doesn't get 'lost' when he switches the view mode
+  Q_UINT16 currPg = getCurrentPageNumber();
+
+  // Set the view mode, i.e., set the number of columns in the
+  // scrollView, and generate new widgets, if necessary
   if (mode == KVS_ContinuousFacing)
     scrollView()->setNrColumns(2);
   else
     scrollView()->setNrColumns(1);
   generateDocumentWidgets();
+
+  // Restore the current 
+  if (currPg != 0)
+    gotoPage(currPg-1);
+
+  // Let the controlling application know that the viewMode was
+  // changed
   emit viewModeChanged();
 }
 
@@ -1041,8 +1119,6 @@
     timer_id = -1;
     bool r = window->setFile(m_file, QString::null, false);
     enableActions(r);
-
-    emit pageInfo(window->totalPages(), window->curr_page()-1 );
   } else {
     if (timer_id == -1)
       timer_id = startTimer(1000);
diff -urN -x CVS kdegraphics.orig/kfile-plugins/exr/kfile_exr.desktop kdegraphics/kfile-plugins/exr/kfile_exr.desktop
--- kdegraphics.orig/kfile-plugins/exr/kfile_exr.desktop	Tue Sep 14 16:27:49 2004
+++ kdegraphics/kfile-plugins/exr/kfile_exr.desktop	Mon Oct  4 15:24:37 2004
@@ -27,7 +27,7 @@
 Name[ru]=Информация о EXR
 Name[sl]=Informacije o EXR
 Name[sr]=EXR информације
-Name[sr@Latn]=EXR информације
+Name[sr@Latn]=EXR informacije
 Name[sv]=EXR-information
 Name[ta]=EXR தகவல்
 Name[tg]=Иттилоот оиди EXR
diff -urN -x CVS kdegraphics.orig/kfile-plugins/ps/gsthumbnail.desktop kdegraphics/kfile-plugins/ps/gsthumbnail.desktop
--- kdegraphics.orig/kfile-plugins/ps/gsthumbnail.desktop	Thu Sep 16 15:48:55 2004
+++ kdegraphics/kfile-plugins/ps/gsthumbnail.desktop	Mon Oct  4 15:24:37 2004
@@ -27,7 +27,7 @@
 Name[sk]=PostScript, PDF a DVI súbory
 Name[sl]=Datoteke PostScript, PDF in DVI
 Name[sr]=PostScript, PDF и DVI фајлови
-Name[sr@Latn]=PostScript, PDF и DVI фајлови
+Name[sr@Latn]=PostScript, PDF i DVI fajlovi
 Name[sv]=Postscript, PDF och DVI-filer
 Name[ta]= போஸ்ட்கிரிப்ட், பிடிஃப் மற்றும் டிவிஐ கோப்புகள்
 Name[tg]=Файлҳои PostScript, PDF ва DVI
diff -urN -x CVS kdegraphics.orig/kfile-plugins/rgb/kfile_rgb.desktop kdegraphics/kfile-plugins/rgb/kfile_rgb.desktop
--- kdegraphics.orig/kfile-plugins/rgb/kfile_rgb.desktop	Thu Sep 16 15:48:56 2004
+++ kdegraphics/kfile-plugins/rgb/kfile_rgb.desktop	Mon Oct  4 15:24:38 2004
@@ -30,7 +30,7 @@
 Name[sk]=SGI obrázok (RGB)
 Name[sl]=Slika SGI (RGB)
 Name[sr]=SGI слика (RGB)
-Name[sr@Latn]=SGI слика (RGB)
+Name[sr@Latn]=SGI slika (RGB)
 Name[sv]=SGI-bild (RGB)
 Name[ta]=எஸ்ஜிஐ படிமம் (RGB)
 Name[tg]=Тасвироти SGI (RGB)
diff -urN -x CVS kdegraphics.orig/kgamma/kcmkgamma/kgamma.desktop kdegraphics/kgamma/kcmkgamma/kgamma.desktop
--- kdegraphics.orig/kgamma/kcmkgamma/kgamma.desktop	Sun Sep 26 18:03:55 2004
+++ kdegraphics/kgamma/kcmkgamma/kgamma.desktop	Mon Oct  4 15:24:40 2004
@@ -49,7 +49,7 @@
 Name[pt]=Gama
 Name[ru]=Гамма
 Name[sr]=Гама
-Name[sr@Latn]=Гама
+Name[sr@Latn]=Gama
 Name[ta]=காமா
 Name[tg]=Гамма
 Name[th]=แกมมา
diff -urN -x CVS kdegraphics.orig/kghostview/dscparse.cpp kdegraphics/kghostview/dscparse.cpp
--- kdegraphics.orig/kghostview/dscparse.cpp	Tue Jan 14 11:47:13 2003
+++ kdegraphics/kghostview/dscparse.cpp	Sat Oct 16 00:07:21 2004
@@ -15,7 +15,7 @@
   the copyright notice and this notice be preserved on all copies.
 */
 
-/* $Id$ */
+/* $Id$ */
 
 /* dscparse.c - DSC parser  */
 
@@ -152,18 +152,56 @@
 
 #define DSC_MAX_ERROR ((sizeof(dsc_severity) / sizeof(int))-2)
 
-const CDSCMEDIA dsc_known_media[CDSC_KNOWN_MEDIA] = {
+const CDSCMEDIA dsc_known_media[] = {
     /* These sizes taken from Ghostscript gs_statd.ps */
     {"11x17", 792, 1224, 0, NULL, NULL},
+    {"A0", 2380, 3368, 0, NULL, NULL},
+    {"A1", 1684, 2380, 0, NULL, NULL}, 
+    {"A2", 1190, 1684, 0, NULL, NULL}, 
     {"A3", 842, 1190, 0, NULL, NULL},
     {"A4", 595, 842, 0, NULL, NULL},
     {"A5", 421, 595, 0, NULL, NULL},
+    {"A6", 297, 421, 0, NULL, NULL}, 
+    {"A7", 210, 297, 0, NULL, NULL}, 
+    {"A8", 148, 210, 0, NULL, NULL}, 
+    {"A9", 105, 148, 0, NULL, NULL}, 
+    {"A10", 74, 105, 0, NULL, NULL}, 
+    {"B0", 2836, 4008, 0, NULL, NULL}, 
+    {"B1", 2004, 2836, 0, NULL, NULL}, 
+    {"B2", 1418, 2004, 0, NULL, NULL}, 
+    {"B3", 1002, 1418, 0, NULL, NULL}, 
     {"B4", 709, 1002, 0, NULL, NULL}, /* ISO, but not Adobe standard */
     {"B5", 501, 709, 0, NULL, NULL},  /* ISO, but not Adobe standard */
+    {"B6", 354, 501, 0, NULL, NULL}, 
+    {"C0", 2600, 3677, 0, NULL, NULL}, 
+    {"C1", 1837, 2600, 0, NULL, NULL},  
+    {"C2", 1298, 1837, 0, NULL, NULL}, 
+    {"C3", 918, 1298, 0, NULL, NULL}, 
+    {"C4", 649, 918, 0, NULL, NULL}, 
+    {"C5", 459, 649, 0, NULL, NULL}, 
+    {"C6", 323, 459, 0, NULL, NULL}, 
     {"Ledger", 1224, 792, 0, NULL, NULL},
     {"Legal", 612, 1008, 0, NULL, NULL},
     {"Letter", 612, 792, 0, NULL, NULL},
     {"Note", 612, 792, 0, NULL, NULL},
+// ISO and JIS B sizes are different....
+    {"jisb0", 2916, 4128, 0, NULL, NULL},
+    {"jisb1", 2064, 2916, 0, NULL, NULL}, 
+    {"jisb2", 1458, 2064, 0, NULL, NULL}, 
+    {"jisb3", 1032, 1458, 0, NULL, NULL}, 
+    {"jisb4", 729, 1032, 0, NULL, NULL}, 
+    {"jisb5", 516, 729, 0, NULL, NULL}, 
+    {"jisb6", 363, 516, 0, NULL, NULL}, 
+// U.S. CAD standard paper sizes
+    {"archE", 2592, 3456, 0, NULL, NULL}, 
+    {"archD", 1728, 2592, 0, NULL, NULL}, 
+    {"archC", 1296, 1728, 0, NULL, NULL}, 
+    {"archB", 864, 1296, 0, NULL, NULL}, 
+    {"archA", 648, 864, 0, NULL, NULL}, 
+// Other paper sizes
+    {"flsa", 612, 936, 0, NULL, NULL}, /* U.S. foolscap */
+    {"flse", 612, 936, 0, NULL, NULL}, /* European foolscap */
+    {"halfletter", 396, 612, 0, NULL, NULL}, 
     {NULL, 0, 0, 0, NULL, NULL}
 };
 
diff -urN -x CVS kdegraphics.orig/kghostview/dscparse.h kdegraphics/kghostview/dscparse.h
--- kdegraphics.orig/kghostview/dscparse.h	Tue Jan 14 11:45:15 2003
+++ kdegraphics/kghostview/dscparse.h	Sat Oct 16 00:07:22 2004
@@ -15,7 +15,7 @@
   the copyright notice and this notice be preserved on all copies.
 */
 
-/* $Id$ */
+/* $Id$ */
 
 /* dscparse.h */
 /* Interface for the DSC parser. */
@@ -239,8 +239,7 @@
     CDSCBBOX *mediabox;	/* Used by GSview for PDF MediaBox */
 } CDSCMEDIA;
 
-#define CDSC_KNOWN_MEDIA 11
-extern const CDSCMEDIA dsc_known_media[CDSC_KNOWN_MEDIA];
+extern const CDSCMEDIA dsc_known_media[];
 
 typedef struct CDSCCTM_S { /* used for %%ViewingOrientation */
     float xx;
diff -urN -x CVS kdegraphics.orig/kmrml/kmrml/server/daemonwatcher.desktop kdegraphics/kmrml/kmrml/server/daemonwatcher.desktop
--- kdegraphics.orig/kmrml/kmrml/server/daemonwatcher.desktop	Thu Sep 16 15:48:58 2004
+++ kdegraphics/kmrml/kmrml/server/daemonwatcher.desktop	Mon Oct  4 15:24:42 2004
@@ -61,7 +61,7 @@
 Comment[sk]=Spustí démonov podľa požiadaviek a pri zlyhaní ich reštartuje
 Comment[sl]=Zažene demone na zahtevo in jih znova zažene ob napaki
 Comment[sr]=На захтев покреће демоне и поново их покреће ако се сруше
-Comment[sr@Latn]=На захтев покреће демоне и поново их покреће ако се сруше
+Comment[sr@Latn]=Na zahtev pokreće demone i ponovo ih pokreće ako se sruše
 Comment[sv]=Starta demoner vid behov och starta om dem vid fel
 Comment[ta]=அவசிய நேரத்தில் டிமென்னை துவக்குகிறது. இயலாதபோது திரும்ப துவக்குகிறது
 Comment[tg]=Оғози демон аз рӯи дархост ва ҳангоми нуқсони он аз сари нав оғоз намудан.
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmbicubicpatch.cpp kdegraphics/kpovmodeler/pmbicubicpatch.cpp
--- kdegraphics.orig/kpovmodeler/pmbicubicpatch.cpp	Thu Apr 22 23:47:05 2004
+++ kdegraphics/kpovmodeler/pmbicubicpatch.cpp	Fri Oct 15 15:24:24 2004
@@ -37,7 +37,7 @@
 const PMVector c_defaultUVVector2 = PMVector( 1.0, 1.0 );
 const PMVector c_defaultUVVector3 = PMVector( 0.0, 1.0 );
 
-PMDefinePropertyClass( PMBicubicPatch, PMProperty );
+PMDefinePropertyClass( PMBicubicPatch, PMBicubicPatchProperty );
 
 class PMPointProperty : public PMPropertyBase
 {
@@ -216,19 +216,19 @@
       s_pMetaObject = new PMMetaObject( "BicubicPatch", Base::metaObject( ),
                                         createNewBicubicPatch );
       s_pMetaObject->addProperty(
-         new PMProperty( "patchType", &PMBicubicPatch::setPatchType,
+         new PMBicubicPatchProperty( "patchType", &PMBicubicPatch::setPatchType,
                          &PMBicubicPatch::patchType ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "uSteps", &PMBicubicPatch::setUSteps,
+         new PMBicubicPatchProperty( "uSteps", &PMBicubicPatch::setUSteps,
                          &PMBicubicPatch::uSteps ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "vSteps", &PMBicubicPatch::setVSteps,
+         new PMBicubicPatchProperty( "vSteps", &PMBicubicPatch::setVSteps,
                          &PMBicubicPatch::vSteps ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "flatness", &PMBicubicPatch::setFlatness,
+         new PMBicubicPatchProperty( "flatness", &PMBicubicPatch::setFlatness,
                          &PMBicubicPatch::flatness ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "uvEnabled", &PMBicubicPatch::enableUV,
+         new PMBicubicPatchProperty( "uvEnabled", &PMBicubicPatch::enableUV,
                          &PMBicubicPatch::isUVEnabled ) );
       s_pMetaObject->addProperty( new PMPointProperty( ) );
       s_pMetaObject->addProperty( new PMUVVectorProperty( ) );
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmblendmapmodifiers.cpp kdegraphics/kpovmodeler/pmblendmapmodifiers.cpp
--- kdegraphics.orig/kpovmodeler/pmblendmapmodifiers.cpp	Fri Jul  4 23:23:33 2003
+++ kdegraphics/kpovmodeler/pmblendmapmodifiers.cpp	Fri Oct 15 15:24:24 2004
@@ -24,7 +24,7 @@
 
 #include <klocale.h>
 
-PMDefinePropertyClass( PMBlendMapModifiers, PMProperty );
+PMDefinePropertyClass( PMBlendMapModifiers, PMBlendMapModifiersProperty );
 PMDefineEnumPropertyClass( PMBlendMapModifiers,
                            PMBlendMapModifiers::PMWaveFormType,
                            PMWaveFormProperty );
@@ -64,22 +64,22 @@
       s_pMetaObject = new PMMetaObject( "BlendMapModifiers", Base::metaObject( ),
                                         createBlendMapModifiers );
       s_pMetaObject->addProperty(
-         new PMProperty( "frequencyEnabled", &PMBlendMapModifiers::enableFrequency,
+         new PMBlendMapModifiersProperty( "frequencyEnabled", &PMBlendMapModifiers::enableFrequency,
                          &PMBlendMapModifiers::isFrequencyEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "frequency", &PMBlendMapModifiers::setFrequency,
+         new PMBlendMapModifiersProperty( "frequency", &PMBlendMapModifiers::setFrequency,
                          &PMBlendMapModifiers::frequency ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "phaseEnabled", &PMBlendMapModifiers::enablePhase,
+         new PMBlendMapModifiersProperty( "phaseEnabled", &PMBlendMapModifiers::enablePhase,
                          &PMBlendMapModifiers::isPhaseEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "phase", &PMBlendMapModifiers::setPhase,
+         new PMBlendMapModifiersProperty( "phase", &PMBlendMapModifiers::setPhase,
                          &PMBlendMapModifiers::phase ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "waveFormEnabled", &PMBlendMapModifiers::enableWaveForm,
+         new PMBlendMapModifiersProperty( "waveFormEnabled", &PMBlendMapModifiers::enableWaveForm,
                          &PMBlendMapModifiers::isWaveFormEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "waveFormExponent", &PMBlendMapModifiers::setWaveFormExponent,
+         new PMBlendMapModifiersProperty( "waveFormExponent", &PMBlendMapModifiers::setWaveFormExponent,
                          &PMBlendMapModifiers::waveFormExponent ) );
 
       PMWaveFormProperty* p = new PMWaveFormProperty(
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmblob.cpp kdegraphics/kpovmodeler/pmblob.cpp
--- kdegraphics.orig/kpovmodeler/pmblob.cpp	Fri Jul  4 23:23:33 2003
+++ kdegraphics/kpovmodeler/pmblob.cpp	Fri Oct 15 15:24:24 2004
@@ -28,7 +28,7 @@
 bool c_defaultSturm = false;
 bool c_defaultHierarchy = false;
 
-PMDefinePropertyClass( PMBlob, PMProperty );
+PMDefinePropertyClass( PMBlob, PMBlobProperty );
 
 PMMetaObject* PMBlob::s_pMetaObject = 0;
 PMObject* createNewBlob( PMPart* part )
@@ -84,11 +84,11 @@
       s_pMetaObject = new PMMetaObject( "Blob", Base::metaObject( ),
                                         createNewBlob );
       s_pMetaObject->addProperty(
-         new PMProperty( "threshold", &PMBlob::setThreshold, &PMBlob::threshold ) );
+         new PMBlobProperty( "threshold", &PMBlob::setThreshold, &PMBlob::threshold ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "hierarchy", &PMBlob::setHierarchy, &PMBlob::hierarchy ) );
+         new PMBlobProperty( "hierarchy", &PMBlob::setHierarchy, &PMBlob::hierarchy ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "sturm", &PMBlob::setSturm, &PMBlob::sturm ) );
+         new PMBlobProperty( "sturm", &PMBlob::setSturm, &PMBlob::sturm ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmblobcylinder.cpp kdegraphics/kpovmodeler/pmblobcylinder.cpp
--- kdegraphics.orig/kpovmodeler/pmblobcylinder.cpp	Fri Jul  4 23:23:33 2003
+++ kdegraphics/kpovmodeler/pmblobcylinder.cpp	Fri Oct 15 15:24:24 2004
@@ -28,7 +28,7 @@
 
 #include <klocale.h>
 
-PMDefinePropertyClass( PMBlobCylinder, PMProperty );
+PMDefinePropertyClass( PMBlobCylinder, PMBlobCylinderProperty );
 
 PMMetaObject* PMBlobCylinder::s_pMetaObject = 0;
 PMObject* createNewBlobCylinder( PMPart* part )
@@ -100,16 +100,16 @@
       s_pMetaObject = new PMMetaObject( "BlobCylinder", Base::metaObject( ),
                                         createNewBlobCylinder );
       s_pMetaObject->addProperty(
-         new PMProperty( "end1", &PMBlobCylinder::setEnd1,
+         new PMBlobCylinderProperty( "end1", &PMBlobCylinder::setEnd1,
                          &PMBlobCylinder::end1 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "end2", &PMBlobCylinder::setEnd2,
+         new PMBlobCylinderProperty( "end2", &PMBlobCylinder::setEnd2,
                          &PMBlobCylinder::end2 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "radius", &PMBlobCylinder::setRadius,
+         new PMBlobCylinderProperty( "radius", &PMBlobCylinder::setRadius,
                          &PMBlobCylinder::radius ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "strength", &PMBlobCylinder::setStrength,
+         new PMBlobCylinderProperty( "strength", &PMBlobCylinder::setStrength,
                          &PMBlobCylinder::strength ) );
    }
    return s_pMetaObject;
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmblobsphere.cpp kdegraphics/kpovmodeler/pmblobsphere.cpp
--- kdegraphics.orig/kpovmodeler/pmblobsphere.cpp	Fri Jul  4 23:23:33 2003
+++ kdegraphics/kpovmodeler/pmblobsphere.cpp	Fri Oct 15 15:24:24 2004
@@ -26,7 +26,7 @@
 
 #include <klocale.h>
 
-PMDefinePropertyClass( PMBlobSphere, PMProperty );
+PMDefinePropertyClass( PMBlobSphere, PMBlobSphereProperty );
 
 PMMetaObject* PMBlobSphere::s_pMetaObject = 0;
 PMObject* createNewBlobSphere( PMPart* part )
@@ -79,13 +79,13 @@
       s_pMetaObject = new PMMetaObject( "BlobSphere", Base::metaObject( ),
                                         createNewBlobSphere );
       s_pMetaObject->addProperty(
-         new PMProperty( "center", &PMBlobSphere::setCentre,
+         new PMBlobSphereProperty( "center", &PMBlobSphere::setCentre,
                          &PMBlobSphere::centre ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "radius", &PMBlobSphere::setRadius,
+         new PMBlobSphereProperty( "radius", &PMBlobSphere::setRadius,
                          &PMBlobSphere::radius ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "strength", &PMBlobSphere::setStrength,
+         new PMBlobSphereProperty( "strength", &PMBlobSphere::setStrength,
                          &PMBlobSphere::strength ) );
    }
    return s_pMetaObject;
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmboundedby.cpp kdegraphics/kpovmodeler/pmboundedby.cpp
--- kdegraphics.orig/kpovmodeler/pmboundedby.cpp	Fri Jul  4 23:23:33 2003
+++ kdegraphics/kpovmodeler/pmboundedby.cpp	Fri Oct 15 15:24:24 2004
@@ -23,7 +23,7 @@
 
 #include <klocale.h>
 
-PMDefinePropertyClass( PMBoundedBy, PMProperty );
+PMDefinePropertyClass( PMBoundedBy, PMBoundedByProperty );
 
 PMMetaObject* PMBoundedBy::s_pMetaObject = 0;
 PMObject* createNewBoundedBy( PMPart* part )
@@ -47,7 +47,7 @@
       s_pMetaObject = new PMMetaObject( "BoundedBy", Base::metaObject( ),
                                         createNewBoundedBy );
       s_pMetaObject->addProperty(
-         new PMProperty( "clippedBy", 0, &PMBoundedBy::clippedBy ) );
+         new PMBoundedByProperty( "clippedBy", 0, &PMBoundedBy::clippedBy ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmbox.cpp kdegraphics/kpovmodeler/pmbox.cpp
--- kdegraphics.orig/kpovmodeler/pmbox.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmbox.cpp	Fri Oct 15 15:24:24 2004
@@ -30,7 +30,7 @@
 const PMVector corner1Default = PMVector( -defaultBoxSize, -defaultBoxSize, -defaultBoxSize );
 const PMVector corner2Default = PMVector( defaultBoxSize, defaultBoxSize, defaultBoxSize );
 
-PMDefinePropertyClass( PMBox, PMProperty );
+PMDefinePropertyClass( PMBox, PMBoxProperty );
 
 PMViewStructure* PMBox::s_pDefaultViewStructure = 0;
 PMMetaObject* PMBox::s_pMetaObject = 0;
@@ -83,9 +83,9 @@
       s_pMetaObject = new PMMetaObject( "Box", Base::metaObject( ),
                                         createNewBox );
       s_pMetaObject->addProperty(
-         new PMProperty( "corner1", &PMBox::setCorner1, &PMBox::corner1 ) );
+         new PMBoxProperty( "corner1", &PMBox::setCorner1, &PMBox::corner1 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "corner2", &PMBox::setCorner2, &PMBox::corner2 ) );
+         new PMBoxProperty( "corner2", &PMBox::setCorner2, &PMBox::corner2 ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmbumpmap.cpp kdegraphics/kpovmodeler/pmbumpmap.cpp
--- kdegraphics.orig/kpovmodeler/pmbumpmap.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmbumpmap.cpp	Fri Oct 15 15:24:24 2004
@@ -40,7 +40,7 @@
 const bool useIndexDefault = false;
 const double bumpSizeDefault = 0.0;
 
-PMDefinePropertyClass( PMBumpMap, PMProperty );
+PMDefinePropertyClass( PMBumpMap, PMBumpMapProperty );
 PMDefineEnumPropertyClass( PMBumpMap, PMBumpMap::PMBitmapType,
                            PMBitmapTypeProperty );
 PMDefineEnumPropertyClass( PMBumpMap, PMBumpMap::PMInterpolateType,
@@ -238,13 +238,13 @@
       s_pMetaObject->addProperty( mp );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "bitmapFile", &PMBumpMap::setBitmapFileName,
+         new PMBumpMapProperty( "bitmapFile", &PMBumpMap::setBitmapFileName,
                          &PMBumpMap::bitmapFile ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "useIndex", &PMBumpMap::enableUseIndex,
+         new PMBumpMapProperty( "useIndex", &PMBumpMap::enableUseIndex,
                          &PMBumpMap::isUseIndexEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "once", &PMBumpMap::enableOnce,
+         new PMBumpMapProperty( "once", &PMBumpMap::enableOnce,
                          &PMBumpMap::isOnceEnabled ) );
    }
    return s_pMetaObject;
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmcamera.cpp kdegraphics/kpovmodeler/pmcamera.cpp
--- kdegraphics.orig/kpovmodeler/pmcamera.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmcamera.cpp	Fri Oct 15 15:24:24 2004
@@ -28,7 +28,7 @@
 
 #include <klocale.h>
 
-PMDefinePropertyClass( PMCamera, PMProperty );
+PMDefinePropertyClass( PMCamera, PMCameraProperty );
 PMDefineEnumPropertyClass( PMCamera, PMCamera::CameraType,
                            PMCameraTypeProperty );
 
@@ -172,31 +172,31 @@
       s_pMetaObject = new PMMetaObject( "Camera", Base::metaObject( ),
                                         createNewCamera );
       s_pMetaObject->addProperty(
-         new PMProperty( "location", &PMCamera::setLocation,
+         new PMCameraProperty( "location", &PMCamera::setLocation,
                          &PMCamera::location ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "lookAt", &PMCamera::setLookAt,
+         new PMCameraProperty( "lookAt", &PMCamera::setLookAt,
                          &PMCamera::lookAt ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "up", &PMCamera::setUp,
+         new PMCameraProperty( "up", &PMCamera::setUp,
                          &PMCamera::up ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "right", &PMCamera::setRight,
+         new PMCameraProperty( "right", &PMCamera::setRight,
                          &PMCamera::right ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "direction", &PMCamera::setDirection,
+         new PMCameraProperty( "direction", &PMCamera::setDirection,
                          &PMCamera::direction ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "sky", &PMCamera::setSky,
+         new PMCameraProperty( "sky", &PMCamera::setSky,
                          &PMCamera::sky ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "aspect", 0, &PMCamera::aspect ) );
+         new PMCameraProperty( "aspect", 0, &PMCamera::aspect ) );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "angleEnabled", &PMCamera::enableAngle,
+         new PMCameraProperty( "angleEnabled", &PMCamera::enableAngle,
                          &PMCamera::isAngleEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "angle", &PMCamera::setAngle,
+         new PMCameraProperty( "angle", &PMCamera::setAngle,
                          &PMCamera::angle ) );
 
       PMCameraTypeProperty* p = new PMCameraTypeProperty(
@@ -212,28 +212,28 @@
       s_pMetaObject->addProperty( p );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "cylinderType", &PMCamera::setCylinderType,
+         new PMCameraProperty( "cylinderType", &PMCamera::setCylinderType,
                          &PMCamera::cylinderType ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "focalBlurEnabled", &PMCamera::enableFocalBlur,
+         new PMCameraProperty( "focalBlurEnabled", &PMCamera::enableFocalBlur,
                          &PMCamera::isFocalBlurEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "aperture", &PMCamera::setAperture,
+         new PMCameraProperty( "aperture", &PMCamera::setAperture,
                          &PMCamera::aperture ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "blurSamples", &PMCamera::setBlurSamples,
+         new PMCameraProperty( "blurSamples", &PMCamera::setBlurSamples,
                          &PMCamera::blurSamples ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "focalPoint", &PMCamera::setFocalPoint,
+         new PMCameraProperty( "focalPoint", &PMCamera::setFocalPoint,
                          &PMCamera::focalPoint ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "confidence", &PMCamera::setConfidence,
+         new PMCameraProperty( "confidence", &PMCamera::setConfidence,
                          &PMCamera::confidence ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "variance", &PMCamera::setVariance,
+         new PMCameraProperty( "variance", &PMCamera::setVariance,
                          &PMCamera::variance ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "export", &PMCamera::setExportPovray,
+         new PMCameraProperty( "export", &PMCamera::setExportPovray,
                          &PMCamera::exportPovray ) );
    }
    return s_pMetaObject;
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmclippedby.cpp kdegraphics/kpovmodeler/pmclippedby.cpp
--- kdegraphics.orig/kpovmodeler/pmclippedby.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmclippedby.cpp	Fri Oct 15 15:24:24 2004
@@ -23,7 +23,7 @@
 
 #include <klocale.h>
 
-PMDefinePropertyClass( PMClippedBy, PMProperty );
+PMDefinePropertyClass( PMClippedBy, PMClippedByProperty );
 
 PMMetaObject* PMClippedBy::s_pMetaObject = 0;
 PMObject* createNewClippedBy( PMPart* part )
@@ -47,7 +47,7 @@
       s_pMetaObject = new PMMetaObject( "ClippedBy", Base::metaObject( ),
                                         createNewClippedBy );
       s_pMetaObject->addProperty(
-         new PMProperty( "boundedBy", 0, &PMClippedBy::boundedBy ) );
+         new PMClippedByProperty( "boundedBy", 0, &PMClippedBy::boundedBy ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmcomment.cpp kdegraphics/kpovmodeler/pmcomment.cpp
--- kdegraphics.orig/kpovmodeler/pmcomment.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmcomment.cpp	Fri Oct 15 15:24:24 2004
@@ -25,7 +25,7 @@
 #include <qtextstream.h>
 #include <klocale.h>
 
-PMDefinePropertyClass( PMComment, PMProperty );
+PMDefinePropertyClass( PMComment, PMCommentProperty );
 
 PMMetaObject* PMComment::s_pMetaObject = 0;
 PMObject* createNewComment( PMPart* part )
@@ -115,7 +115,7 @@
       s_pMetaObject = new PMMetaObject( "Comment", Base::metaObject( ),
                                         createNewComment );
       s_pMetaObject->addProperty(
-         new PMProperty( "text", &PMComment::setText, &PMComment::text ) );
+         new PMCommentProperty( "text", &PMComment::setText, &PMComment::text ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmcone.cpp kdegraphics/kpovmodeler/pmcone.cpp
--- kdegraphics.orig/kpovmodeler/pmcone.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmcone.cpp	Fri Oct 15 15:24:24 2004
@@ -43,7 +43,7 @@
 int PMCone::s_numSteps = c_defaultConeSteps;
 int PMCone::s_parameterKey = 0;
 
-PMDefinePropertyClass( PMCone, PMProperty );
+PMDefinePropertyClass( PMCone, PMConeProperty );
 
 PMMetaObject* PMCone::s_pMetaObject = 0;
 PMObject* createNewCone( PMPart* part )
@@ -107,15 +107,15 @@
       s_pMetaObject = new PMMetaObject( "Cone", Base::metaObject( ),
                                         createNewCone );
       s_pMetaObject->addProperty(
-         new PMProperty( "end1", &PMCone::setEnd1, &PMCone::end1 ) );
+         new PMConeProperty( "end1", &PMCone::setEnd1, &PMCone::end1 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "end2", &PMCone::setEnd2, &PMCone::end2 ) );
+         new PMConeProperty( "end2", &PMCone::setEnd2, &PMCone::end2 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "radius1", &PMCone::setRadius1, &PMCone::radius1 ) );
+         new PMConeProperty( "radius1", &PMCone::setRadius1, &PMCone::radius1 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "radius2", &PMCone::setRadius2, &PMCone::radius2 ) );
+         new PMConeProperty( "radius2", &PMCone::setRadius2, &PMCone::radius2 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "open", &PMCone::setOpen, &PMCone::open ) );
+         new PMConeProperty( "open", &PMCone::setOpen, &PMCone::open ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmcylinder.cpp kdegraphics/kpovmodeler/pmcylinder.cpp
--- kdegraphics.orig/kpovmodeler/pmcylinder.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmcylinder.cpp	Fri Oct 15 15:24:24 2004
@@ -43,7 +43,7 @@
 int PMCylinder::s_numSteps = c_defaultCylinderSteps;
 int PMCylinder::s_parameterKey = 0;
 
-PMDefinePropertyClass( PMCylinder, PMProperty );
+PMDefinePropertyClass( PMCylinder, PMCylinderProperty );
 
 PMMetaObject* PMCylinder::s_pMetaObject = 0;
 PMObject* createNewCylinder( PMPart* part )
@@ -104,13 +104,13 @@
       s_pMetaObject = new PMMetaObject( "Cylinder", Base::metaObject( ),
                                         createNewCylinder );
       s_pMetaObject->addProperty(
-         new PMProperty( "end1", &PMCylinder::setEnd1, &PMCylinder::end1 ) );
+         new PMCylinderProperty( "end1", &PMCylinder::setEnd1, &PMCylinder::end1 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "end2", &PMCylinder::setEnd2, &PMCylinder::end2 ) );
+         new PMCylinderProperty( "end2", &PMCylinder::setEnd2, &PMCylinder::end2 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "radius", &PMCylinder::setRadius, &PMCylinder::radius ) );
+         new PMCylinderProperty( "radius", &PMCylinder::setRadius, &PMCylinder::radius ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "open", &PMCylinder::setOpen, &PMCylinder::open ) );
+         new PMCylinderProperty( "open", &PMCylinder::setOpen, &PMCylinder::open ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmdeclare.cpp kdegraphics/kpovmodeler/pmdeclare.cpp
--- kdegraphics.orig/kpovmodeler/pmdeclare.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmdeclare.cpp	Fri Oct 15 15:24:24 2004
@@ -25,7 +25,7 @@
 #include <qvaluelist.h>
 #include <klocale.h>
 
-PMDefinePropertyClass( PMDeclare, PMProperty );
+PMDefinePropertyClass( PMDeclare, PMDeclareProperty );
 
 PMMetaObject* PMDeclare::s_pMetaObject;
 PMObject* createNewDeclare( PMPart* part )
@@ -54,7 +54,7 @@
       s_pMetaObject = new PMMetaObject( "Declare", Base::metaObject( ),
                                         createNewDeclare );
       s_pMetaObject->addProperty(
-         new PMProperty( "id", &PMDeclare::setID, &PMDeclare::id ) );
+         new PMDeclareProperty( "id", &PMDeclare::setID, &PMDeclare::id ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmdisc.cpp kdegraphics/kpovmodeler/pmdisc.cpp
--- kdegraphics.orig/kpovmodeler/pmdisc.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmdisc.cpp	Fri Oct 15 15:24:24 2004
@@ -42,7 +42,7 @@
 int PMDisc::s_numSteps = c_defaultDiscSteps;
 int PMDisc::s_parameterKey = 0;
 
-PMDefinePropertyClass( PMDisc, PMProperty );
+PMDefinePropertyClass( PMDisc, PMDiscProperty );
 
 PMMetaObject* PMDisc::s_pMetaObject = 0;
 PMObject* createNewDisc( PMPart* part )
@@ -103,13 +103,13 @@
       s_pMetaObject = new PMMetaObject( "Disc", Base::metaObject( ),
                                         createNewDisc );
       s_pMetaObject->addProperty(
-         new PMProperty( "center", &PMDisc::setCenter, &PMDisc::center ) );
+         new PMDiscProperty( "center", &PMDisc::setCenter, &PMDisc::center ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "normal", &PMDisc::setNormal, &PMDisc::normal ) );
+         new PMDiscProperty( "normal", &PMDisc::setNormal, &PMDisc::normal ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "radius", &PMDisc::setRadius, &PMDisc::radius ) );
+         new PMDiscProperty( "radius", &PMDisc::setRadius, &PMDisc::radius ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "holeRadius", &PMDisc::setHoleRadius, &PMDisc::holeRadius ) );
+         new PMDiscProperty( "holeRadius", &PMDisc::setHoleRadius, &PMDisc::holeRadius ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmfinish.cpp kdegraphics/kpovmodeler/pmfinish.cpp
--- kdegraphics.orig/kpovmodeler/pmfinish.cpp	Mon Sep 22 03:39:59 2003
+++ kdegraphics/kpovmodeler/pmfinish.cpp	Fri Oct 15 15:24:24 2004
@@ -40,7 +40,7 @@
 const double reflectionExponentDefault = 1.0;
 const double reflectionMetallicDefault = 1.0;
 
-PMDefinePropertyClass( PMFinish, PMProperty );
+PMDefinePropertyClass( PMFinish, PMFinishProperty );
 
 PMMetaObject* PMFinish::s_pMetaObject = 0;
 PMObject* createNewFinish( PMPart* part )
@@ -137,69 +137,69 @@
       s_pMetaObject = new PMMetaObject( "Finish", Base::metaObject( ),
                                         createNewFinish );
       s_pMetaObject->addProperty(
-         new PMProperty( "ambientColor", &PMFinish::setAmbientColor, &PMFinish::ambientColor ) );
+         new PMFinishProperty( "ambientColor", &PMFinish::setAmbientColor, &PMFinish::ambientColor ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "phong", &PMFinish::setPhong, &PMFinish::phong ) );
+         new PMFinishProperty( "phong", &PMFinish::setPhong, &PMFinish::phong ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "diffuse", &PMFinish::setDiffuse, &PMFinish::diffuse ) );
+         new PMFinishProperty( "diffuse", &PMFinish::setDiffuse, &PMFinish::diffuse ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "brilliance", &PMFinish::setBrilliance, &PMFinish::brilliance ) );
+         new PMFinishProperty( "brilliance", &PMFinish::setBrilliance, &PMFinish::brilliance ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "crand", &PMFinish::setCrand, &PMFinish::crand ) );
+         new PMFinishProperty( "crand", &PMFinish::setCrand, &PMFinish::crand ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "conserveEnergy", &PMFinish::setConserveEnergy, &PMFinish::conserveEnergy ) );
+         new PMFinishProperty( "conserveEnergy", &PMFinish::setConserveEnergy, &PMFinish::conserveEnergy ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "specular", &PMFinish::setSpecular, &PMFinish::specular ) );
+         new PMFinishProperty( "specular", &PMFinish::setSpecular, &PMFinish::specular ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "roughness", &PMFinish::setRoughness, &PMFinish::roughness ) );
+         new PMFinishProperty( "roughness", &PMFinish::setRoughness, &PMFinish::roughness ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "metallic", &PMFinish::setMetallic, &PMFinish::metallic ) );
+         new PMFinishProperty( "metallic", &PMFinish::setMetallic, &PMFinish::metallic ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "irid", &PMFinish::setIrid, &PMFinish::irid ) );
+         new PMFinishProperty( "irid", &PMFinish::setIrid, &PMFinish::irid ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "iridAmount", &PMFinish::setIridAmount, &PMFinish::iridAmount ) );
+         new PMFinishProperty( "iridAmount", &PMFinish::setIridAmount, &PMFinish::iridAmount ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "iridThickness", &PMFinish::setIridThickness, &PMFinish::iridThickness ) );
+         new PMFinishProperty( "iridThickness", &PMFinish::setIridThickness, &PMFinish::iridThickness ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "reflectionColor", &PMFinish::setReflectionColor, &PMFinish::reflectionColor ) );
+         new PMFinishProperty( "reflectionColor", &PMFinish::setReflectionColor, &PMFinish::reflectionColor ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "reflectionMinColor", &PMFinish::setReflectionMinColor, &PMFinish::reflectionMinColor ) );
+         new PMFinishProperty( "reflectionMinColor", &PMFinish::setReflectionMinColor, &PMFinish::reflectionMinColor ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "reflectionFresnel", &PMFinish::setReflectionFresnel, &PMFinish::reflectionFresnel ) );
+         new PMFinishProperty( "reflectionFresnel", &PMFinish::setReflectionFresnel, &PMFinish::reflectionFresnel ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "reflectionFalloff", &PMFinish::setReflectionFalloff, &PMFinish::reflectionFalloff ) );
+         new PMFinishProperty( "reflectionFalloff", &PMFinish::setReflectionFalloff, &PMFinish::reflectionFalloff ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "reflectionExponent", &PMFinish::setReflectionExponent, &PMFinish::reflectionExponent ) );
+         new PMFinishProperty( "reflectionExponent", &PMFinish::setReflectionExponent, &PMFinish::reflectionExponent ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "reflectionMetallic", &PMFinish::setReflectionMetallic, &PMFinish::reflectionMetallic ) );
+         new PMFinishProperty( "reflectionMetallic", &PMFinish::setReflectionMetallic, &PMFinish::reflectionMetallic ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "ambientEnabled", &PMFinish::enableAmbient, &PMFinish::isAmbientEnabled ) );
+         new PMFinishProperty( "ambientEnabled", &PMFinish::enableAmbient, &PMFinish::isAmbientEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "phongEnabled", &PMFinish::enablePhong, &PMFinish::isPhongEnabled ) );
+         new PMFinishProperty( "phongEnabled", &PMFinish::enablePhong, &PMFinish::isPhongEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "phongSizeEnabled", &PMFinish::enablePhongSize, &PMFinish::isPhongSizeEnabled ) );
+         new PMFinishProperty( "phongSizeEnabled", &PMFinish::enablePhongSize, &PMFinish::isPhongSizeEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "diffuseEnabled", &PMFinish::enableDiffuse, &PMFinish::isDiffuseEnabled ) );
+         new PMFinishProperty( "diffuseEnabled", &PMFinish::enableDiffuse, &PMFinish::isDiffuseEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "brillianceEnabled", &PMFinish::enableBrilliance, &PMFinish::isBrillianceEnabled ) );
+         new PMFinishProperty( "brillianceEnabled", &PMFinish::enableBrilliance, &PMFinish::isBrillianceEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "crandEnabled", &PMFinish::enableCrand, &PMFinish::isCrandEnabled ) );
+         new PMFinishProperty( "crandEnabled", &PMFinish::enableCrand, &PMFinish::isCrandEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "specularEnabled", &PMFinish::enableSpecular, &PMFinish::isSpecularEnabled ) );
+         new PMFinishProperty( "specularEnabled", &PMFinish::enableSpecular, &PMFinish::isSpecularEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "roughnessEnabled", &PMFinish::enableRoughness, &PMFinish::isRoughnessEnabled ) );
+         new PMFinishProperty( "roughnessEnabled", &PMFinish::enableRoughness, &PMFinish::isRoughnessEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "metallicEnabled", &PMFinish::enableMetallic, &PMFinish::isMetallicEnabled ) );
+         new PMFinishProperty( "metallicEnabled", &PMFinish::enableMetallic, &PMFinish::isMetallicEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "reflectionEnabled", &PMFinish::enableReflection, &PMFinish::isReflectionEnabled ) );
+         new PMFinishProperty( "reflectionEnabled", &PMFinish::enableReflection, &PMFinish::isReflectionEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "reflectionMinEnabled", &PMFinish::enableReflectionMin, &PMFinish::isReflectionMinEnabled ) );
+         new PMFinishProperty( "reflectionMinEnabled", &PMFinish::enableReflectionMin, &PMFinish::isReflectionMinEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "refFalloffEnabled", &PMFinish::enableRefFalloff, &PMFinish::isRefFalloffEnabled ) );
+         new PMFinishProperty( "refFalloffEnabled", &PMFinish::enableRefFalloff, &PMFinish::isRefFalloffEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "refExponentEnabled", &PMFinish::enableRefExponent, &PMFinish::isRefExponentEnabled ) );
+         new PMFinishProperty( "refExponentEnabled", &PMFinish::enableRefExponent, &PMFinish::isRefExponentEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "refMetallicEnabled", &PMFinish::enableRefMetallic, &PMFinish::isRefMetallicEnabled ) );
+         new PMFinishProperty( "refMetallicEnabled", &PMFinish::enableRefMetallic, &PMFinish::isRefMetallicEnabled ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmfog.cpp kdegraphics/kpovmodeler/pmfog.cpp
--- kdegraphics.orig/kpovmodeler/pmfog.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmfog.cpp	Fri Oct 15 15:24:24 2004
@@ -35,7 +35,7 @@
 const double turbDepthDefault = 0.5;
 const PMVector upDefault = PMVector( 0.0, 1.0, 0.0 );
 
-PMDefinePropertyClass( PMFog, PMProperty );
+PMDefinePropertyClass( PMFog, PMFogProperty );
 
 PMMetaObject* PMFog::s_pMetaObject = 0;
 PMObject* createNewFog( PMPart* part )
@@ -88,29 +88,29 @@
       s_pMetaObject = new PMMetaObject( "Fog", Base::metaObject( ),
                                         createNewFog );
       s_pMetaObject->addProperty(
-         new PMProperty( "fogType", &PMFog::setFogType, &PMFog::fogType ) );
+         new PMFogProperty( "fogType", &PMFog::setFogType, &PMFog::fogType ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "distance", &PMFog::setDistance, &PMFog::distance ) );
+         new PMFogProperty( "distance", &PMFog::setDistance, &PMFog::distance ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "color", &PMFog::setColor, &PMFog::color ) );
+         new PMFogProperty( "color", &PMFog::setColor, &PMFog::color ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "turbulenceEnabled", &PMFog::enableTurbulence, &PMFog::isTurbulenceEnabled ) );
+         new PMFogProperty( "turbulenceEnabled", &PMFog::enableTurbulence, &PMFog::isTurbulenceEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "turbulence", &PMFog::setValueVector, &PMFog::valueVector ) );
+         new PMFogProperty( "turbulence", &PMFog::setValueVector, &PMFog::valueVector ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "octaves", &PMFog::setOctaves, &PMFog::octaves ) );
+         new PMFogProperty( "octaves", &PMFog::setOctaves, &PMFog::octaves ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "omega", &PMFog::setOmega, &PMFog::omega ) );
+         new PMFogProperty( "omega", &PMFog::setOmega, &PMFog::omega ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "lambda", &PMFog::setLambda, &PMFog::lambda ) );
+         new PMFogProperty( "lambda", &PMFog::setLambda, &PMFog::lambda ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "depth", &PMFog::setDepth, &PMFog::depth ) );
+         new PMFogProperty( "depth", &PMFog::setDepth, &PMFog::depth ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "offset", &PMFog::setFogOffset, &PMFog::fogOffset ) );
+         new PMFogProperty( "offset", &PMFog::setFogOffset, &PMFog::fogOffset ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "altitude", &PMFog::setFogAlt, &PMFog::fogAlt ) );
+         new PMFogProperty( "altitude", &PMFog::setFogAlt, &PMFog::fogAlt ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "up", &PMFog::setUp, &PMFog::up ) );
+         new PMFogProperty( "up", &PMFog::setUp, &PMFog::up ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmglobalphotons.cpp kdegraphics/kpovmodeler/pmglobalphotons.cpp
--- kdegraphics.orig/kpovmodeler/pmglobalphotons.cpp	Mon Sep  8 05:49:12 2003
+++ kdegraphics/kpovmodeler/pmglobalphotons.cpp	Fri Oct 15 15:24:24 2004
@@ -41,7 +41,7 @@
 const double radiusMediaDefault = 0.0;
 const double radiusMediaMultiDefault = 1.0;
 
-PMDefinePropertyClass( PMGlobalPhotons, PMProperty );
+PMDefinePropertyClass( PMGlobalPhotons, PMGlobalPhotonsProperty );
 PMDefineEnumPropertyClass( PMGlobalPhotons, PMGlobalPhotons::PMNumberType, PMNumberProperty );
 
 PMMetaObject* PMGlobalPhotons::s_pMetaObject = 0;
@@ -114,41 +114,41 @@
       p1->addEnumValue( "Count", Count );
       s_pMetaObject->addProperty( p1 );
 
-      s_pMetaObject->addProperty( new PMProperty( "spacing",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "spacing",
          &PMGlobalPhotons::setSpacing, &PMGlobalPhotons::spacing ) );
-      s_pMetaObject->addProperty( new PMProperty( "count",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "count",
          &PMGlobalPhotons::setCount, &PMGlobalPhotons::count ) );
-      s_pMetaObject->addProperty( new PMProperty( "gatherMin",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "gatherMin",
          &PMGlobalPhotons::setGatherMin, &PMGlobalPhotons::gatherMin ) );
-      s_pMetaObject->addProperty( new PMProperty( "gatherMax",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "gatherMax",
          &PMGlobalPhotons::setGatherMax, &PMGlobalPhotons::gatherMax ) );
-      s_pMetaObject->addProperty( new PMProperty( "mediaMaxSteps",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "mediaMaxSteps",
          &PMGlobalPhotons::setMediaMaxSteps, &PMGlobalPhotons::mediaMaxSteps ) );
-      s_pMetaObject->addProperty( new PMProperty( "mediaFactor",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "mediaFactor",
          &PMGlobalPhotons::setMediaFactor, &PMGlobalPhotons::mediaFactor ) );
-      s_pMetaObject->addProperty( new PMProperty( "jitter",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "jitter",
          &PMGlobalPhotons::setJitter, &PMGlobalPhotons::jitter ) );
-      s_pMetaObject->addProperty( new PMProperty( "maxTraceLevelGlobal",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "maxTraceLevelGlobal",
          &PMGlobalPhotons::setMaxTraceLevelGlobal, &PMGlobalPhotons::maxTraceLevelGlobal ) );
-      s_pMetaObject->addProperty( new PMProperty( "maxTraceLevel",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "maxTraceLevel",
          &PMGlobalPhotons::setMaxTraceLevel, &PMGlobalPhotons::maxTraceLevel ) );
-      s_pMetaObject->addProperty( new PMProperty( "adcBailoutGlobal",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "adcBailoutGlobal",
          &PMGlobalPhotons::setAdcBailoutGlobal, &PMGlobalPhotons::adcBailoutGlobal ) );
-      s_pMetaObject->addProperty( new PMProperty( "adcBailout",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "adcBailout",
          &PMGlobalPhotons::setAdcBailout, &PMGlobalPhotons::adcBailout ) );
-      s_pMetaObject->addProperty( new PMProperty( "autostop",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "autostop",
          &PMGlobalPhotons::setAutostop, &PMGlobalPhotons::autostop ) );
-      s_pMetaObject->addProperty( new PMProperty( "expandIncrease",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "expandIncrease",
          &PMGlobalPhotons::setExpandIncrease, &PMGlobalPhotons::expandIncrease ) );
-      s_pMetaObject->addProperty( new PMProperty( "expandMin",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "expandMin",
          &PMGlobalPhotons::setExpandMin, &PMGlobalPhotons::expandMin ) );
-      s_pMetaObject->addProperty( new PMProperty( "radiusGather",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "radiusGather",
          &PMGlobalPhotons::setRadiusGather, &PMGlobalPhotons::radiusGather ) );
-      s_pMetaObject->addProperty( new PMProperty( "radiusGatherMulti",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "radiusGatherMulti",
          &PMGlobalPhotons::setRadiusGatherMulti, &PMGlobalPhotons::radiusGatherMulti ) );
-      s_pMetaObject->addProperty( new PMProperty( "radiusMedia",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "radiusMedia",
          &PMGlobalPhotons::setRadiusMedia, &PMGlobalPhotons::radiusMedia ) );
-      s_pMetaObject->addProperty( new PMProperty( "radiusMediaMulti",
+      s_pMetaObject->addProperty( new PMGlobalPhotonsProperty( "radiusMediaMulti",
          &PMGlobalPhotons::setRadiusMediaMulti, &PMGlobalPhotons::radiusMediaMulti ) );
    }
    return s_pMetaObject;
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmglobalsettings.cpp kdegraphics/kpovmodeler/pmglobalsettings.cpp
--- kdegraphics.orig/kpovmodeler/pmglobalsettings.cpp	Tue Sep  9 00:29:50 2003
+++ kdegraphics/kpovmodeler/pmglobalsettings.cpp	Fri Oct 15 15:24:24 2004
@@ -43,7 +43,7 @@
 const int nearestCountDefault = 5;
 const int recursionLimitDefault = 2;
 
-PMDefinePropertyClass( PMGlobalSettings, PMProperty );
+PMDefinePropertyClass( PMGlobalSettings, PMGlobalSettingsProperty );
 PMDefineEnumPropertyClass( PMGlobalSettings, PMGlobalSettings::PMNoiseType, PMNoiseProperty );
 
 PMMetaObject* PMGlobalSettings::s_pMetaObject = 0;
@@ -111,21 +111,21 @@
       s_pMetaObject = new PMMetaObject( "GlobalSettings", Base::metaObject( ),
                                         createNewGlobalSettings );
       s_pMetaObject->addProperty(
-         new PMProperty( "adcBailout", &PMGlobalSettings::setAdcBailout, &PMGlobalSettings::adcBailout ) );
+         new PMGlobalSettingsProperty( "adcBailout", &PMGlobalSettings::setAdcBailout, &PMGlobalSettings::adcBailout ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "ambientLight", &PMGlobalSettings::setAmbientLight, &PMGlobalSettings::ambientLight ) );
+         new PMGlobalSettingsProperty( "ambientLight", &PMGlobalSettings::setAmbientLight, &PMGlobalSettings::ambientLight ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "assumedGamma", &PMGlobalSettings::setAssumedGamma, &PMGlobalSettings::assumedGamma ) );
+         new PMGlobalSettingsProperty( "assumedGamma", &PMGlobalSettings::setAssumedGamma, &PMGlobalSettings::assumedGamma ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "hfGray16", &PMGlobalSettings::setHfGray16, &PMGlobalSettings::hfGray16 ) );
+         new PMGlobalSettingsProperty( "hfGray16", &PMGlobalSettings::setHfGray16, &PMGlobalSettings::hfGray16 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "iridWaveLength", &PMGlobalSettings::setIridWaveLength, &PMGlobalSettings::iridWaveLength ) );
+         new PMGlobalSettingsProperty( "iridWaveLength", &PMGlobalSettings::setIridWaveLength, &PMGlobalSettings::iridWaveLength ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "maxIntersections", &PMGlobalSettings::setMaxIntersections, &PMGlobalSettings::maxIntersections ) );
+         new PMGlobalSettingsProperty( "maxIntersections", &PMGlobalSettings::setMaxIntersections, &PMGlobalSettings::maxIntersections ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "maxTraceLevel", &PMGlobalSettings::setMaxTraceLevel, &PMGlobalSettings::maxTraceLevel ) );
+         new PMGlobalSettingsProperty( "maxTraceLevel", &PMGlobalSettings::setMaxTraceLevel, &PMGlobalSettings::maxTraceLevel ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "numberWaves", &PMGlobalSettings::setNumberWaves, &PMGlobalSettings::numberWaves ) );
+         new PMGlobalSettingsProperty( "numberWaves", &PMGlobalSettings::setNumberWaves, &PMGlobalSettings::numberWaves ) );
 
       PMNoiseProperty* p = new PMNoiseProperty( "noiseGenerator", &PMGlobalSettings::setNoiseGenerator,
                                               &PMGlobalSettings::noiseGenerator );
@@ -135,25 +135,25 @@
       s_pMetaObject->addProperty( p );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "radiosity", &PMGlobalSettings::enableRadiosity, &PMGlobalSettings::isRadiosityEnabled ) );
+         new PMGlobalSettingsProperty( "radiosity", &PMGlobalSettings::enableRadiosity, &PMGlobalSettings::isRadiosityEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "brightness", &PMGlobalSettings::setBrightness, &PMGlobalSettings::brightness ) );
+         new PMGlobalSettingsProperty( "brightness", &PMGlobalSettings::setBrightness, &PMGlobalSettings::brightness ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "count", &PMGlobalSettings::setCount, &PMGlobalSettings::count ) );
+         new PMGlobalSettingsProperty( "count", &PMGlobalSettings::setCount, &PMGlobalSettings::count ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "distanceMaximum", &PMGlobalSettings::setDistanceMaximum, &PMGlobalSettings::distanceMaximum ) );
+         new PMGlobalSettingsProperty( "distanceMaximum", &PMGlobalSettings::setDistanceMaximum, &PMGlobalSettings::distanceMaximum ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "errorBound", &PMGlobalSettings::setErrorBound, &PMGlobalSettings::errorBound ) );
+         new PMGlobalSettingsProperty( "errorBound", &PMGlobalSettings::setErrorBound, &PMGlobalSettings::errorBound ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "grayThreshold", &PMGlobalSettings::setGrayThreshold, &PMGlobalSettings::grayThreshold ) );
+         new PMGlobalSettingsProperty( "grayThreshold", &PMGlobalSettings::setGrayThreshold, &PMGlobalSettings::grayThreshold ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "lowErrorFactor", &PMGlobalSettings::setLowErrorFactor, &PMGlobalSettings::lowErrorFactor ) );
+         new PMGlobalSettingsProperty( "lowErrorFactor", &PMGlobalSettings::setLowErrorFactor, &PMGlobalSettings::lowErrorFactor ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "minimumReuse", &PMGlobalSettings::setMinimumReuse, &PMGlobalSettings::minimumReuse ) );
+         new PMGlobalSettingsProperty( "minimumReuse", &PMGlobalSettings::setMinimumReuse, &PMGlobalSettings::minimumReuse ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "nearestCount", &PMGlobalSettings::setNearestCount, &PMGlobalSettings::nearestCount ) );
+         new PMGlobalSettingsProperty( "nearestCount", &PMGlobalSettings::setNearestCount, &PMGlobalSettings::nearestCount ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "recursionLimit", &PMGlobalSettings::setRecursionLimit, &PMGlobalSettings::recursionLimit ) );
+         new PMGlobalSettingsProperty( "recursionLimit", &PMGlobalSettings::setRecursionLimit, &PMGlobalSettings::recursionLimit ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmgraphicalobject.cpp kdegraphics/kpovmodeler/pmgraphicalobject.cpp
--- kdegraphics.orig/kpovmodeler/pmgraphicalobject.cpp	Fri Apr  9 16:36:37 2004
+++ kdegraphics/kpovmodeler/pmgraphicalobject.cpp	Fri Oct 15 15:24:24 2004
@@ -28,7 +28,7 @@
 const bool c_defaultRelativeVisibility = true;
 const bool c_defaultExport = true;
 
-PMDefinePropertyClass( PMGraphicalObject, PMProperty );
+PMDefinePropertyClass( PMGraphicalObject, PMGraphicalObjectProperty );
 
 PMMetaObject* PMGraphicalObject::s_pMetaObject = 0;
 
@@ -66,25 +66,25 @@
    {
       s_pMetaObject = new PMMetaObject( "GraphicalObject", Base::metaObject( ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "noShadow", &PMGraphicalObject::setNoShadow,
+         new PMGraphicalObjectProperty( "noShadow", &PMGraphicalObject::setNoShadow,
                          &PMGraphicalObject::noShadow ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "noImage", &PMGraphicalObject::setNoImage,
+         new PMGraphicalObjectProperty( "noImage", &PMGraphicalObject::setNoImage,
                          &PMGraphicalObject::noImage ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "noReflection", &PMGraphicalObject::setNoReflection,
+         new PMGraphicalObjectProperty( "noReflection", &PMGraphicalObject::setNoReflection,
                          &PMGraphicalObject::noReflection ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "doubleIlluminate", &PMGraphicalObject::setDoubleIlluminate,
+         new PMGraphicalObjectProperty( "doubleIlluminate", &PMGraphicalObject::setDoubleIlluminate,
                          &PMGraphicalObject::doubleIlluminate ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "visibilityLevel", &PMGraphicalObject::setVisibilityLevel,
+         new PMGraphicalObjectProperty( "visibilityLevel", &PMGraphicalObject::setVisibilityLevel,
                          &PMGraphicalObject::visibilityLevel ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "relativeVisibilityLevel", &PMGraphicalObject::setVisibilityLevelRelative,
+         new PMGraphicalObjectProperty( "relativeVisibilityLevel", &PMGraphicalObject::setVisibilityLevelRelative,
                          &PMGraphicalObject::isVisibilityLevelRelative ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "export", &PMGraphicalObject::setExportPovray,
+         new PMGraphicalObjectProperty( "export", &PMGraphicalObject::setExportPovray,
                          &PMGraphicalObject::exportPovray ) );
    }
    return s_pMetaObject;
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmheightfield.cpp kdegraphics/kpovmodeler/pmheightfield.cpp
--- kdegraphics.orig/kpovmodeler/pmheightfield.cpp	Sun Feb  8 22:15:35 2004
+++ kdegraphics/kpovmodeler/pmheightfield.cpp	Fri Oct 15 15:24:24 2004
@@ -35,7 +35,7 @@
 const double c_defaultWaterLevel = 0.0;
 const int c_defaultDisplayDetail = 8;
 
-PMDefinePropertyClass( PMHeightField, PMProperty );
+PMDefinePropertyClass( PMHeightField, PMHeightFieldProperty );
 PMDefineEnumPropertyClass( PMHeightField, PMHeightField::HeightFieldType,
                            PMHeightFieldTypeProperty );
 
@@ -115,15 +115,15 @@
       s_pMetaObject = new PMMetaObject( "HeightField", Base::metaObject( ),
                                         createNewHeightField );
       s_pMetaObject->addProperty(
-         new PMProperty( "fileName", &PMHeightField::setFileName, &PMHeightField::fileName ) );
+         new PMHeightFieldProperty( "fileName", &PMHeightField::setFileName, &PMHeightField::fileName ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "hierarchy", &PMHeightField::setHierarchy, &PMHeightField::hierarchy ) );
+         new PMHeightFieldProperty( "hierarchy", &PMHeightField::setHierarchy, &PMHeightField::hierarchy ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "smooth", &PMHeightField::setSmooth, &PMHeightField::smooth ) );
+         new PMHeightFieldProperty( "smooth", &PMHeightField::setSmooth, &PMHeightField::smooth ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "waterLevel", &PMHeightField::setWaterLevel, &PMHeightField::waterLevel ) );
+         new PMHeightFieldProperty( "waterLevel", &PMHeightField::setWaterLevel, &PMHeightField::waterLevel ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "displayDetail", &PMHeightField::setDisplayDetail, &PMHeightField::displayDetail ) );
+         new PMHeightFieldProperty( "displayDetail", &PMHeightField::setDisplayDetail, &PMHeightField::displayDetail ) );
       PMHeightFieldTypeProperty* p =
          new PMHeightFieldTypeProperty( "heightFieldType", &PMHeightField::setHeightFieldType,
                                         &PMHeightField::heightFieldType );
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmimagemap.cpp kdegraphics/kpovmodeler/pmimagemap.cpp
--- kdegraphics.orig/kpovmodeler/pmimagemap.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmimagemap.cpp	Fri Oct 15 15:24:24 2004
@@ -38,7 +38,7 @@
 const PMImageMap::PMMapType mapTypeDefault = PMImageMap::MapPlanar;
 const PMImageMap::PMInterpolateType interpolateTypeDefault = PMImageMap::InterpolateNone;
 
-PMDefinePropertyClass( PMImageMap, PMProperty );
+PMDefinePropertyClass( PMImageMap, PMImageMapProperty );
 PMDefineEnumPropertyClass( PMImageMap, PMImageMap::PMBitmapType,
                            PMBitmapTypeProperty );
 PMDefineEnumPropertyClass( PMImageMap, PMImageMap::PMInterpolateType,
@@ -312,22 +312,22 @@
       s_pMetaObject->addProperty( mp );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "bitmapFile", &PMImageMap::setBitmapFileName,
+         new PMImageMapProperty( "bitmapFile", &PMImageMap::setBitmapFileName,
                          &PMImageMap::bitmapFile ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "filterAllEnabled", &PMImageMap::enableFilterAll,
+         new PMImageMapProperty( "filterAllEnabled", &PMImageMap::enableFilterAll,
                          &PMImageMap::isFilterAllEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "filterAll", &PMImageMap::setFilterAll,
+         new PMImageMapProperty( "filterAll", &PMImageMap::setFilterAll,
                          &PMImageMap::filterAll ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "transmitAllEnabled", &PMImageMap::enableTransmitAll,
+         new PMImageMapProperty( "transmitAllEnabled", &PMImageMap::enableTransmitAll,
                          &PMImageMap::isTransmitAllEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "transmitAll", &PMImageMap::setTransmitAll,
+         new PMImageMapProperty( "transmitAll", &PMImageMap::setTransmitAll,
                          &PMImageMap::transmitAll ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "once", &PMImageMap::enableOnce, &PMImageMap::isOnceEnabled ) );
+         new PMImageMapProperty( "once", &PMImageMap::enableOnce, &PMImageMap::isOnceEnabled ) );
 
       // TODO: filters and transmits properties
    }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pminterior.cpp kdegraphics/kpovmodeler/pminterior.cpp
--- kdegraphics.orig/kpovmodeler/pminterior.cpp	Mon Sep  8 15:08:49 2003
+++ kdegraphics/kpovmodeler/pminterior.cpp	Fri Oct 15 15:24:24 2004
@@ -30,7 +30,7 @@
 const double fadeDistanceDefault = 0.0;
 const double fadePowerDefault = 0.0;
 
-PMDefinePropertyClass( PMInterior, PMProperty );
+PMDefinePropertyClass( PMInterior, PMInteriorProperty );
 
 PMMetaObject* PMInterior::s_pMetaObject = 0;
 PMObject* createNewInterior( PMPart* part )
@@ -83,29 +83,29 @@
       s_pMetaObject = new PMMetaObject( "Interior", Base::metaObject( ),
                                         createNewInterior );
       s_pMetaObject->addProperty(
-         new PMProperty( "ior", &PMInterior::setIor, &PMInterior::ior ) );
+         new PMInteriorProperty( "ior", &PMInterior::setIor, &PMInterior::ior ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "caustics", &PMInterior::setCaustics, &PMInterior::caustics ) );
+         new PMInteriorProperty( "caustics", &PMInterior::setCaustics, &PMInterior::caustics ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "dispersion", &PMInterior::setDispersion, &PMInterior::dispersion ) );
+         new PMInteriorProperty( "dispersion", &PMInterior::setDispersion, &PMInterior::dispersion ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "dispSamples", &PMInterior::setDispSamples, &PMInterior::dispSamples ) );
+         new PMInteriorProperty( "dispSamples", &PMInterior::setDispSamples, &PMInterior::dispSamples ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "fadeDistance", &PMInterior::setFadeDistance, &PMInterior::fadeDistance ) );
+         new PMInteriorProperty( "fadeDistance", &PMInterior::setFadeDistance, &PMInterior::fadeDistance ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "fadePower", &PMInterior::setFadePower, &PMInterior::fadePower ) );
+         new PMInteriorProperty( "fadePower", &PMInterior::setFadePower, &PMInterior::fadePower ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "iorEnabled", &PMInterior::enableIor, &PMInterior::isIorEnabled ) );
+         new PMInteriorProperty( "iorEnabled", &PMInterior::enableIor, &PMInterior::isIorEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "causticsEnabled", &PMInterior::enableCaustics, &PMInterior::isCausticsEnabled ) );
+         new PMInteriorProperty( "causticsEnabled", &PMInterior::enableCaustics, &PMInterior::isCausticsEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "dispersionEnabled", &PMInterior::enableDispersion, &PMInterior::isDispersionEnabled ) );
+         new PMInteriorProperty( "dispersionEnabled", &PMInterior::enableDispersion, &PMInterior::isDispersionEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "dispSamplesEnabled", &PMInterior::enableDispSamples, &PMInterior::isDispSamplesEnabled ) );
+         new PMInteriorProperty( "dispSamplesEnabled", &PMInterior::enableDispSamples, &PMInterior::isDispSamplesEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "fadeDistanceEnabled", &PMInterior::enableFadeDistance, &PMInterior::isFadeDistanceEnabled ) );
+         new PMInteriorProperty( "fadeDistanceEnabled", &PMInterior::enableFadeDistance, &PMInterior::isFadeDistanceEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "fadePowerEnabled", &PMInterior::enableFadePower, &PMInterior::isFadePowerEnabled ) );
+         new PMInteriorProperty( "fadePowerEnabled", &PMInterior::enableFadePower, &PMInterior::isFadePowerEnabled ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmisosurface.cpp kdegraphics/kpovmodeler/pmisosurface.cpp
--- kdegraphics.orig/kpovmodeler/pmisosurface.cpp	Sun Aug 31 15:14:03 2003
+++ kdegraphics/kpovmodeler/pmisosurface.cpp	Fri Oct 15 15:24:24 2004
@@ -42,7 +42,7 @@
 const int c_defaultMaxTrace = 1;
 const bool c_defaultAllIntersections = false;
 
-PMDefinePropertyClass( PMIsoSurface, PMProperty );
+PMDefinePropertyClass( PMIsoSurface, PMIsoSurfaceProperty );
 
 PMViewStructure* PMIsoSurface::s_pDefaultViewStructure = 0;
 PMMetaObject* PMIsoSurface::s_pMetaObject = 0;
@@ -166,9 +166,9 @@
       // TODO
       /*
       s_pMetaObject->addProperty(
-         new PMProperty( "corner1", &PMIsoSurface::setCorner1, &PMIsoSurface::corner1 ) );
+         new PMIsoSurfaceProperty( "corner1", &PMIsoSurface::setCorner1, &PMIsoSurface::corner1 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "corner2", &PMIsoSurface::setCorner2, &PMIsoSurface::corner2 ) );
+         new PMIsoSurfaceProperty( "corner2", &PMIsoSurface::setCorner2, &PMIsoSurface::corner2 ) );
       */
    }
    return s_pMetaObject;
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmjuliafractal.cpp kdegraphics/kpovmodeler/pmjuliafractal.cpp
--- kdegraphics.orig/kpovmodeler/pmjuliafractal.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmjuliafractal.cpp	Fri Oct 15 15:24:24 2004
@@ -39,7 +39,7 @@
 const double c_defaultPrecision = 20.0;
 
 
-PMDefinePropertyClass( PMJuliaFractal, PMProperty );
+PMDefinePropertyClass( PMJuliaFractal, PMJuliaFractalProperty );
 PMDefineEnumPropertyClass( PMJuliaFractal, PMJuliaFractal::AlgebraType,
                            PMAlgebraTypeProperty );
 PMDefineEnumPropertyClass( PMJuliaFractal, PMJuliaFractal::FunctionType,
@@ -119,22 +119,22 @@
       s_pMetaObject = new PMMetaObject( "JuliaFractal", Base::metaObject( ),
                                         createNewJuliaFractal );
       s_pMetaObject->addProperty(
-         new PMProperty( "juliaParameter", &PMJuliaFractal::setJuliaParameter,
+         new PMJuliaFractalProperty( "juliaParameter", &PMJuliaFractal::setJuliaParameter,
                          &PMJuliaFractal::juliaParameter ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "maximumIterations", &PMJuliaFractal::setMaximumIterations,
+         new PMJuliaFractalProperty( "maximumIterations", &PMJuliaFractal::setMaximumIterations,
                          &PMJuliaFractal::maximumIterations ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "precision", &PMJuliaFractal::setPrecision,
+         new PMJuliaFractalProperty( "precision", &PMJuliaFractal::setPrecision,
                          &PMJuliaFractal::precision ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "sliceNormal", &PMJuliaFractal::setSliceNormal,
+         new PMJuliaFractalProperty( "sliceNormal", &PMJuliaFractal::setSliceNormal,
                          &PMJuliaFractal::sliceNormal ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "sliceDistance", &PMJuliaFractal::setSliceDistance,
+         new PMJuliaFractalProperty( "sliceDistance", &PMJuliaFractal::setSliceDistance,
                          &PMJuliaFractal::sliceDistance ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "exponent", &PMJuliaFractal::setExponent,
+         new PMJuliaFractalProperty( "exponent", &PMJuliaFractal::setExponent,
                          &PMJuliaFractal::exponent ) );
 
       PMAlgebraTypeProperty* ap = new PMAlgebraTypeProperty(
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmlathe.cpp kdegraphics/kpovmodeler/pmlathe.cpp
--- kdegraphics.orig/kpovmodeler/pmlathe.cpp	Fri Sep 19 22:46:22 2003
+++ kdegraphics/kpovmodeler/pmlathe.cpp	Fri Oct 15 15:24:24 2004
@@ -43,7 +43,7 @@
 const bool defaultSturm = false;
 const PMLathe::SplineType defaultSplineType = PMLathe::LinearSpline;
 
-PMDefinePropertyClass( PMLathe, PMProperty );
+PMDefinePropertyClass( PMLathe, PMLatheProperty );
 PMDefineEnumPropertyClass( PMLathe, PMLathe::SplineType, PMSplineTypeProperty );
 
 PMMetaObject* PMLathe::s_pMetaObject = 0;
@@ -205,7 +205,7 @@
       s_pMetaObject = new PMMetaObject( "Lathe", Base::metaObject( ),
                                         createNewLathe );
       s_pMetaObject->addProperty(
-         new PMProperty( "sturm", &PMLathe::setSturm, &PMLathe::sturm ) );
+         new PMLatheProperty( "sturm", &PMLathe::setSturm, &PMLathe::sturm ) );
       PMSplineTypeProperty* p = new PMSplineTypeProperty(
          "splineType", &PMLathe::setSplineType, &PMLathe::splineType );
       p->addEnumValue( "LinearSpline", LinearSpline );
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmlight.cpp kdegraphics/kpovmodeler/pmlight.cpp
--- kdegraphics.orig/kpovmodeler/pmlight.cpp	Sun May  2 11:11:15 2004
+++ kdegraphics/kpovmodeler/pmlight.cpp	Fri Oct 15 15:24:24 2004
@@ -54,7 +54,7 @@
 int PMLight::s_nSpotLines = 8;
 double PMLight::s_length = 1.0;
 
-PMDefinePropertyClass( PMLight, PMProperty );
+PMDefinePropertyClass( PMLight, PMLightProperty );
 PMDefineEnumPropertyClass( PMLight, PMLight::PMLightType, PMTypeProperty );
 PMDefineEnumPropertyClass( PMLight, PMLight::PMAreaType, PMAreaProperty );
 
@@ -283,21 +283,21 @@
       s_pMetaObject->addProperty( p );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "location", &PMLight::setLocation, &PMLight::location ) );
+         new PMLightProperty( "location", &PMLight::setLocation, &PMLight::location ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "color", &PMLight::setColor, &PMLight::color ) );
+         new PMLightProperty( "color", &PMLight::setColor, &PMLight::color ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "radius", &PMLight::setRadius, &PMLight::radius ) );
+         new PMLightProperty( "radius", &PMLight::setRadius, &PMLight::radius ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "falloff", &PMLight::setFalloff, &PMLight::falloff ) );
+         new PMLightProperty( "falloff", &PMLight::setFalloff, &PMLight::falloff ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "tightness", &PMLight::setTightness, &PMLight::tightness ) );
+         new PMLightProperty( "tightness", &PMLight::setTightness, &PMLight::tightness ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "pointAt", &PMLight::setPointAt, &PMLight::pointAt ) );
+         new PMLightProperty( "pointAt", &PMLight::setPointAt, &PMLight::pointAt ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "parallel", &PMLight::setParallel, &PMLight::parallel ) );
+         new PMLightProperty( "parallel", &PMLight::setParallel, &PMLight::parallel ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "areaLight", &PMLight::setAreaLight, &PMLight::isAreaLight ) );
+         new PMLightProperty( "areaLight", &PMLight::setAreaLight, &PMLight::isAreaLight ) );
 
       PMAreaProperty* p2 = new PMAreaProperty( "areaType", &PMLight::setAreaType,
                                                &PMLight::areaType );
@@ -306,26 +306,26 @@
       s_pMetaObject->addProperty( p2 );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "axis1", &PMLight::setAxis1, &PMLight::axis1 ) );
+         new PMLightProperty( "axis1", &PMLight::setAxis1, &PMLight::axis1 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "axis2", &PMLight::setAxis2, &PMLight::axis2 ) );
+         new PMLightProperty( "axis2", &PMLight::setAxis2, &PMLight::axis2 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "adaptive", &PMLight::setAdaptive, &PMLight::adaptive ) );
+         new PMLightProperty( "adaptive", &PMLight::setAdaptive, &PMLight::adaptive ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "orient", &PMLight::setOrient, &PMLight::orient ) );
+         new PMLightProperty( "orient", &PMLight::setOrient, &PMLight::orient ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "jitter", &PMLight::setJitter, &PMLight::jitter ) );
+         new PMLightProperty( "jitter", &PMLight::setJitter, &PMLight::jitter ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "fading", &PMLight::setFading, &PMLight::fading ) );
+         new PMLightProperty( "fading", &PMLight::setFading, &PMLight::fading ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "fadeDistance", &PMLight::setFadeDistance, &PMLight::fadeDistance ) );
+         new PMLightProperty( "fadeDistance", &PMLight::setFadeDistance, &PMLight::fadeDistance ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "fadePower", &PMLight::setFadePower, &PMLight::fadePower ) );
+         new PMLightProperty( "fadePower", &PMLight::setFadePower, &PMLight::fadePower ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "mediaInteraction", &PMLight::setMediaInteraction,
+         new PMLightProperty( "mediaInteraction", &PMLight::setMediaInteraction,
                          &PMLight::mediaInteraction ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "mediaAttenuation", &PMLight::setMediaAttenuation,
+         new PMLightProperty( "mediaAttenuation", &PMLight::setMediaAttenuation,
                          &PMLight::mediaAttenuation ) );
    }
    return s_pMetaObject;
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmlightgroup.cpp kdegraphics/kpovmodeler/pmlightgroup.cpp
--- kdegraphics.orig/kpovmodeler/pmlightgroup.cpp	Mon Sep  8 15:08:49 2003
+++ kdegraphics/kpovmodeler/pmlightgroup.cpp	Fri Oct 15 15:24:24 2004
@@ -23,7 +23,7 @@
 #include "pmlightgroupedit.h"
 #include "pmmemento.h"
 
-PMDefinePropertyClass( PMLightGroup, PMProperty );
+PMDefinePropertyClass( PMLightGroup, PMLightGroupProperty );
 
 PMMetaObject* PMLightGroup::s_pMetaObject = 0;
 PMObject* createNewLightGroup( PMPart* part )
@@ -76,7 +76,7 @@
       s_pMetaObject = new PMMetaObject( "LightGroup", Base::metaObject( ),
                                         createNewLightGroup );
 
-      s_pMetaObject->addProperty( new PMProperty( "globalLights",
+      s_pMetaObject->addProperty( new PMLightGroupProperty( "globalLights",
          &PMLightGroup::setGlobalLights, &PMLightGroup::globalLights ) );
 
    }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmlistpattern.cpp kdegraphics/kpovmodeler/pmlistpattern.cpp
--- kdegraphics.orig/kpovmodeler/pmlistpattern.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmlistpattern.cpp	Fri Oct 15 15:24:24 2004
@@ -26,7 +26,7 @@
 
 #include <klocale.h>
 
-PMDefinePropertyClass( PMListPattern, PMProperty );
+PMDefinePropertyClass( PMListPattern, PMListPatternProperty );
 PMDefineEnumPropertyClass( PMListPattern, PMListPattern::PMListType,
                            PMListTypeProperty );
 
@@ -129,10 +129,10 @@
       s_pMetaObject->addProperty( p );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "brickSize", &PMListPattern::setBrickSize,
+         new PMListPatternProperty( "brickSize", &PMListPattern::setBrickSize,
                          &PMListPattern::brickSize ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "mortar", &PMListPattern::setMortar,
+         new PMListPatternProperty( "mortar", &PMListPattern::setMortar,
                          &PMListPattern::mortar ) );
    }
    return s_pMetaObject;
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmmaterialmap.cpp kdegraphics/kpovmodeler/pmmaterialmap.cpp
--- kdegraphics.orig/kpovmodeler/pmmaterialmap.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmmaterialmap.cpp	Fri Oct 15 15:24:24 2004
@@ -36,7 +36,7 @@
 const PMMaterialMap::PMMapType mapTypeDefault = PMMaterialMap::MapPlanar;
 const PMMaterialMap::PMInterpolateType interpolateTypeDefault = PMMaterialMap::InterpolateNone;
 
-PMDefinePropertyClass( PMMaterialMap, PMProperty );
+PMDefinePropertyClass( PMMaterialMap, PMMaterialMapProperty );
 PMDefineEnumPropertyClass( PMMaterialMap, PMMaterialMap::PMBitmapType,
                            PMBitmapTypeProperty );
 PMDefineEnumPropertyClass( PMMaterialMap, PMMaterialMap::PMInterpolateType,
@@ -223,10 +223,10 @@
       s_pMetaObject->addProperty( mp );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "bitmapFile", &PMMaterialMap::setBitmapFileName,
+         new PMMaterialMapProperty( "bitmapFile", &PMMaterialMap::setBitmapFileName,
                          &PMMaterialMap::bitmapFile ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "once", &PMMaterialMap::enableOnce, &PMMaterialMap::isOnceEnabled ) );
+         new PMMaterialMapProperty( "once", &PMMaterialMap::enableOnce, &PMMaterialMap::isOnceEnabled ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmmedia.cpp kdegraphics/kpovmodeler/pmmedia.cpp
--- kdegraphics.orig/kpovmodeler/pmmedia.cpp	Mon Mar 29 01:17:18 2004
+++ kdegraphics/kpovmodeler/pmmedia.cpp	Fri Oct 15 15:24:24 2004
@@ -40,7 +40,7 @@
 const double scatteringEccentricityDefault = 0;
 const double scatteringExtinctionDefault = 1.0;
 
-PMDefinePropertyClass( PMMedia, PMProperty );
+PMDefinePropertyClass( PMMedia, PMMediaProperty );
 PMMetaObject* PMMedia::s_pMetaObject = 0;
 PMObject* createNewMedia( PMPart* part )
 {
@@ -104,42 +104,42 @@
       s_pMetaObject = new PMMetaObject( "Media", Base::metaObject( ),
                                         createNewMedia );
       s_pMetaObject->addProperty(
-         new PMProperty( "method", &PMMedia::setMethod, &PMMedia::method ) );
+         new PMMediaProperty( "method", &PMMedia::setMethod, &PMMedia::method ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "intervals", &PMMedia::setIntervals, &PMMedia::intervals ) );
+         new PMMediaProperty( "intervals", &PMMedia::setIntervals, &PMMedia::intervals ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "samplesMin", &PMMedia::setSamplesMin, &PMMedia::samplesMin ) );
+         new PMMediaProperty( "samplesMin", &PMMedia::setSamplesMin, &PMMedia::samplesMin ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "samplesMax", &PMMedia::setSamplesMax, &PMMedia::samplesMax ) );
+         new PMMediaProperty( "samplesMax", &PMMedia::setSamplesMax, &PMMedia::samplesMax ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "aaLevel", &PMMedia::setAALevel, &PMMedia::aaLevel ) );
+         new PMMediaProperty( "aaLevel", &PMMedia::setAALevel, &PMMedia::aaLevel ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "confidence", &PMMedia::setConfidence, &PMMedia::confidence ) );
+         new PMMediaProperty( "confidence", &PMMedia::setConfidence, &PMMedia::confidence ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "variance", &PMMedia::setVariance, &PMMedia::variance ) );
+         new PMMediaProperty( "variance", &PMMedia::setVariance, &PMMedia::variance ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "ratio", &PMMedia::setRatio, &PMMedia::ratio ) );
+         new PMMediaProperty( "ratio", &PMMedia::setRatio, &PMMedia::ratio ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "aaThreshold", &PMMedia::setAAThreshold, &PMMedia::aaThreshold ) );
+         new PMMediaProperty( "aaThreshold", &PMMedia::setAAThreshold, &PMMedia::aaThreshold ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "absorption", &PMMedia::setAbsorption, &PMMedia::absorption ) );
+         new PMMediaProperty( "absorption", &PMMedia::setAbsorption, &PMMedia::absorption ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "emission", &PMMedia::setEmission, &PMMedia::emission ) );
+         new PMMediaProperty( "emission", &PMMedia::setEmission, &PMMedia::emission ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "scatteringType", &PMMedia::setScatteringType, &PMMedia::scatteringType ) );
+         new PMMediaProperty( "scatteringType", &PMMedia::setScatteringType, &PMMedia::scatteringType ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "scatteringColor", &PMMedia::setScatteringColor, &PMMedia::scatteringColor ) );
+         new PMMediaProperty( "scatteringColor", &PMMedia::setScatteringColor, &PMMedia::scatteringColor ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "scatteringExtinction", &PMMedia::setScatteringExtinction, &PMMedia::scatteringExtinction ) );
+         new PMMediaProperty( "scatteringExtinction", &PMMedia::setScatteringExtinction, &PMMedia::scatteringExtinction ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "scatteringEccentricity", &PMMedia::setScatteringEccentricity, &PMMedia::scatteringEccentricity ) );
+         new PMMediaProperty( "scatteringEccentricity", &PMMedia::setScatteringEccentricity, &PMMedia::scatteringEccentricity ) );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "absorptionEnabled", &PMMedia::enableAbsorption, &PMMedia::isAbsorptionEnabled ) );
+         new PMMediaProperty( "absorptionEnabled", &PMMedia::enableAbsorption, &PMMedia::isAbsorptionEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "emissionEnabled", &PMMedia::enableEmission, &PMMedia::isEmissionEnabled ) );
+         new PMMediaProperty( "emissionEnabled", &PMMedia::enableEmission, &PMMedia::isEmissionEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "scatteringEnabled", &PMMedia::enableScattering, &PMMedia::isScatteringEnabled ) );
+         new PMMediaProperty( "scatteringEnabled", &PMMedia::enableScattering, &PMMedia::isScatteringEnabled ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmmesh.cpp kdegraphics/kpovmodeler/pmmesh.cpp
--- kdegraphics.orig/kpovmodeler/pmmesh.cpp	Thu Apr 22 01:36:20 2004
+++ kdegraphics/kpovmodeler/pmmesh.cpp	Fri Oct 15 15:24:24 2004
@@ -28,7 +28,7 @@
 
 const PMVector insideVectorDefault = PMVector( 0.0, 0.0, 0.0 );
 
-PMDefinePropertyClass( PMMesh, PMProperty );
+PMDefinePropertyClass( PMMesh, PMMeshProperty );
 
 class PMMeshMemento : public PMMemento
 {
@@ -140,11 +140,11 @@
       s_pMetaObject = new PMMetaObject( "Mesh", Base::metaObject( ), createNewMesh );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "hierarchy", &PMMesh::setHierarchy, &PMMesh::hierarchy ) );
+         new PMMeshProperty( "hierarchy", &PMMesh::setHierarchy, &PMMesh::hierarchy ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "insideVectorEnabled", &PMMesh::enableInsideVector, &PMMesh::isInsideVectorEnabled ) );
+         new PMMeshProperty( "insideVectorEnabled", &PMMesh::enableInsideVector, &PMMesh::isInsideVectorEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "insideVector", &PMMesh::setInsideVector, &PMMesh::insideVector ) );
+         new PMMeshProperty( "insideVector", &PMMesh::setInsideVector, &PMMesh::insideVector ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmnamedobject.cpp kdegraphics/kpovmodeler/pmnamedobject.cpp
--- kdegraphics.orig/kpovmodeler/pmnamedobject.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmnamedobject.cpp	Fri Oct 15 15:24:24 2004
@@ -20,7 +20,7 @@
 #include "pmxmlhelper.h"
 #include "pmmemento.h"
 
-PMDefinePropertyClass( PMNamedObject, PMProperty );
+PMDefinePropertyClass( PMNamedObject, PMNamedObjectProperty );
 
 PMMetaObject* PMNamedObject::s_pMetaObject = 0;
 
@@ -45,7 +45,7 @@
    {
       s_pMetaObject = new PMMetaObject( "NamedObject", Base::metaObject( ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "name", &PMNamedObject::setName, &PMNamedObject::name ) );
+         new PMNamedObjectProperty( "name", &PMNamedObject::setName, &PMNamedObject::name ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmnormal.cpp kdegraphics/kpovmodeler/pmnormal.cpp
--- kdegraphics.orig/kpovmodeler/pmnormal.cpp	Thu Apr 22 23:47:05 2004
+++ kdegraphics/kpovmodeler/pmnormal.cpp	Fri Oct 15 15:24:24 2004
@@ -28,7 +28,7 @@
 const double bumpSizeDefault = 0.0;
 const double accuracyDefault = 0.02;
 
-PMDefinePropertyClass( PMNormal, PMProperty );
+PMDefinePropertyClass( PMNormal, PMNormProperty );
 
 PMMetaObject* PMNormal::s_pMetaObject = 0;
 PMObject* createNewNormal( PMPart* part )
@@ -65,13 +65,13 @@
       s_pMetaObject = new PMMetaObject( "Normal", Base::metaObject( ),
                                         createNewNormal );
       s_pMetaObject->addProperty(
-         new PMProperty( "bumpSize", &PMNormal::setBumpSize, &PMNormal::bumpSize ) );
+         new PMNormProperty( "bumpSize", &PMNormal::setBumpSize, &PMNormal::bumpSize ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "bumpSizeEnabled", &PMNormal::enableBumpSize, &PMNormal::isBumpSizeEnabled ) );
+         new PMNormProperty( "bumpSizeEnabled", &PMNormal::enableBumpSize, &PMNormal::isBumpSizeEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "accuracy", &PMNormal::setAccuracy, &PMNormal::accuracy ) );
+         new PMNormProperty( "accuracy", &PMNormal::setAccuracy, &PMNormal::accuracy ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "uvMapping", &PMNormal::setUVMapping, &PMNormal::uvMapping ) );
+         new PMNormProperty( "uvMapping", &PMNormal::setUVMapping, &PMNormal::uvMapping ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmobject.cpp kdegraphics/kpovmodeler/pmobject.cpp
--- kdegraphics.orig/kpovmodeler/pmobject.cpp	Wed May 19 00:26:12 2004
+++ kdegraphics/kpovmodeler/pmobject.cpp	Fri Oct 15 15:24:24 2004
@@ -24,7 +24,7 @@
 #include "pminsertrulesystem.h"
 #include "pmpart.h"
 
-PMDefinePropertyClass( PMObject, PMProperty );
+PMDefinePropertyClass( PMObject, PMObjectProperty );
 
 PMMetaObject* PMObject::s_pMetaObject = 0;
 
@@ -63,9 +63,9 @@
    {
       s_pMetaObject = new PMMetaObject( "Object", 0 );
       s_pMetaObject->addProperty(
-         new PMProperty( "readOnly", &PMObject::setReadOnly, &PMObject::isReadOnly ) );
+         new PMObjectProperty( "readOnly", &PMObject::setReadOnly, &PMObject::isReadOnly ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "numberOfChildren", 0, &PMObject::countChildren ) );
+         new PMObjectProperty( "numberOfChildren", 0, &PMObject::countChildren ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmobjectlink.cpp kdegraphics/kpovmodeler/pmobjectlink.cpp
--- kdegraphics.orig/kpovmodeler/pmobjectlink.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmobjectlink.cpp	Fri Oct 15 15:24:24 2004
@@ -28,7 +28,7 @@
 
 #include <klocale.h>
 
-PMDefinePropertyClass( PMObjectLink, PMProperty );
+PMDefinePropertyClass( PMObjectLink, PMObjectLinkProperty );
 
 PMMetaObject* PMObjectLink::s_pMetaObject = 0;
 PMObject* createNewObjectLink( PMPart* part )
@@ -65,7 +65,7 @@
       s_pMetaObject = new PMMetaObject( "ObjectLink", Base::metaObject( ),
                                         createNewObjectLink );
       s_pMetaObject->addProperty(
-         new PMProperty( "linkedObject", &PMObjectLink::setLinkedObjectProperty,
+         new PMObjectLinkProperty( "linkedObject", &PMObjectLink::setLinkedObjectProperty,
                          &PMObjectLink::linkedObjectProperty ) );
    }
    return s_pMetaObject;
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmpattern.cpp kdegraphics/kpovmodeler/pmpattern.cpp
--- kdegraphics.orig/kpovmodeler/pmpattern.cpp	Wed Apr  7 02:22:22 2004
+++ kdegraphics/kpovmodeler/pmpattern.cpp	Fri Oct 15 15:24:24 2004
@@ -64,7 +64,7 @@
 const double lambdaDefault = 2.0;
 const double depthDefault = 0.0;
 
-PMDefinePropertyClass( PMPattern, PMProperty );
+PMDefinePropertyClass( PMPattern, PMPatternProperty );
 PMDefineEnumPropertyClass( PMPattern, PMPattern::PMPatternType,
                            PMPatternTypeProperty );
 PMDefineEnumPropertyClass( PMPattern, PMPattern::PMNoiseType,
@@ -460,40 +460,40 @@
       s_pMetaObject = new PMMetaObject( "Pattern", Base::metaObject( ),
                                         createNewPattern );
       s_pMetaObject->addProperty(
-         new PMProperty( "agateTurbulence", &PMPattern::setAgateTurbulence, &PMPattern::agateTurbulence ) );
+         new PMPatternProperty( "agateTurbulence", &PMPattern::setAgateTurbulence, &PMPattern::agateTurbulence ) );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "densityFile", &PMPattern::setDensityFile, &PMPattern::densityFile ) );
+         new PMPatternProperty( "densityFile", &PMPattern::setDensityFile, &PMPattern::densityFile ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "densityInterpolate", &PMPattern::setDensityInterpolate, &PMPattern::densityInterpolate ) );
+         new PMPatternProperty( "densityInterpolate", &PMPattern::setDensityInterpolate, &PMPattern::densityInterpolate ) );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "gradient", &PMPattern::setGradient, &PMPattern::gradient ) );
+         new PMPatternProperty( "gradient", &PMPattern::setGradient, &PMPattern::gradient ) );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "maxIterations", &PMPattern::setMaxIterations, &PMPattern::maxIterations ) );
+         new PMPatternProperty( "maxIterations", &PMPattern::setMaxIterations, &PMPattern::maxIterations ) );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "quiltControl0", &PMPattern::setQuiltControl0, &PMPattern::quiltControl0 ) );
+         new PMPatternProperty( "quiltControl0", &PMPattern::setQuiltControl0, &PMPattern::quiltControl0 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "quiltControl1", &PMPattern::setQuiltControl1, &PMPattern::quiltControl1 ) );
+         new PMPatternProperty( "quiltControl1", &PMPattern::setQuiltControl1, &PMPattern::quiltControl1 ) );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "spiralNumberArms", &PMPattern::setSpiralNumberArms, &PMPattern::spiralNumberArms ) );
+         new PMPatternProperty( "spiralNumberArms", &PMPattern::setSpiralNumberArms, &PMPattern::spiralNumberArms ) );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "turbulence", &PMPattern::enableTurbulence, &PMPattern::isTurbulenceEnabled ) );
+         new PMPatternProperty( "turbulence", &PMPattern::enableTurbulence, &PMPattern::isTurbulenceEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "valueVector", &PMPattern::setValueVector, &PMPattern::valueVector ) );
+         new PMPatternProperty( "valueVector", &PMPattern::setValueVector, &PMPattern::valueVector ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "octaves", &PMPattern::setOctaves, &PMPattern::octaves ) );
+         new PMPatternProperty( "octaves", &PMPattern::setOctaves, &PMPattern::octaves ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "omega", &PMPattern::setOmega, &PMPattern::omega ) );
+         new PMPatternProperty( "omega", &PMPattern::setOmega, &PMPattern::omega ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "lambda", &PMPattern::setLambda, &PMPattern::lambda ) );
+         new PMPatternProperty( "lambda", &PMPattern::setLambda, &PMPattern::lambda ) );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "depth", &PMPattern::setDepth, &PMPattern::depth ) );
+         new PMPatternProperty( "depth", &PMPattern::setDepth, &PMPattern::depth ) );
 
       PMPatternTypeProperty* p = new PMPatternTypeProperty(
          "patternType", &PMPattern::setPatternType, &PMPattern::patternType );
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmphotons.cpp kdegraphics/kpovmodeler/pmphotons.cpp
--- kdegraphics.orig/kpovmodeler/pmphotons.cpp	Mon Sep  8 05:49:12 2003
+++ kdegraphics/kpovmodeler/pmphotons.cpp	Fri Oct 15 15:24:25 2004
@@ -25,7 +25,7 @@
 
 const double spacingMultiDefault = 1.0;
 
-PMDefinePropertyClass( PMPhotons, PMProperty );
+PMDefinePropertyClass( PMPhotons, PMPhotonsProperty );
 
 PMMetaObject* PMPhotons::s_pMetaObject = 0;
 PMObject* createNewPhotons( PMPart* part )
@@ -67,19 +67,19 @@
       s_pMetaObject = new PMMetaObject( "Photons", Base::metaObject( ),
                                        createNewPhotons );
 
-      s_pMetaObject->addProperty( new PMProperty( "target",
+      s_pMetaObject->addProperty( new PMPhotonsProperty( "target",
          &PMPhotons::setTarget, &PMPhotons::target ) );
-      s_pMetaObject->addProperty( new PMProperty( "spacingMulti",
+      s_pMetaObject->addProperty( new PMPhotonsProperty( "spacingMulti",
          &PMPhotons::setSpacingMulti, &PMPhotons::spacingMulti ) );
-      s_pMetaObject->addProperty( new PMProperty( "refraction",
+      s_pMetaObject->addProperty( new PMPhotonsProperty( "refraction",
          &PMPhotons::setRefraction, &PMPhotons::refraction ) );
-      s_pMetaObject->addProperty( new PMProperty( "reflection",
+      s_pMetaObject->addProperty( new PMPhotonsProperty( "reflection",
          &PMPhotons::setReflection, &PMPhotons::reflection ) );
-      s_pMetaObject->addProperty( new PMProperty( "collect",
+      s_pMetaObject->addProperty( new PMPhotonsProperty( "collect",
          &PMPhotons::setCollect, &PMPhotons::collect ) );
-      s_pMetaObject->addProperty( new PMProperty( "passThrough",
+      s_pMetaObject->addProperty( new PMPhotonsProperty( "passThrough",
          &PMPhotons::setPassThrough, &PMPhotons::passThrough ) );
-      s_pMetaObject->addProperty( new PMProperty( "areaLight",
+      s_pMetaObject->addProperty( new PMPhotonsProperty( "areaLight",
          &PMPhotons::setAreaLight, &PMPhotons::areaLight ) );
    }
    return s_pMetaObject;
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmpigment.cpp kdegraphics/kpovmodeler/pmpigment.cpp
--- kdegraphics.orig/kpovmodeler/pmpigment.cpp	Thu Apr 22 23:47:05 2004
+++ kdegraphics/kpovmodeler/pmpigment.cpp	Fri Oct 15 15:24:25 2004
@@ -23,7 +23,7 @@
 
 #include <klocale.h>
 
-PMDefinePropertyClass( PMPigment, PMProperty );
+PMDefinePropertyClass( PMPigment, PMPigmentProperty );
 
 PMMetaObject* PMPigment::s_pMetaObject = 0;
 PMObject* createNewPigment( PMPart* part )
@@ -52,7 +52,7 @@
       s_pMetaObject = new PMMetaObject( "Pigment", Base::metaObject( ),
                                         createNewPigment );
       s_pMetaObject->addProperty(
-         new PMProperty( "uvMapping", &PMPigment::setUVMapping, &PMPigment::uvMapping ) );
+         new PMPigmentProperty( "uvMapping", &PMPigment::setUVMapping, &PMPigment::uvMapping ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmplane.cpp kdegraphics/kpovmodeler/pmplane.cpp
--- kdegraphics.orig/kpovmodeler/pmplane.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmplane.cpp	Fri Oct 15 15:24:25 2004
@@ -37,7 +37,7 @@
 double PMPlane::s_planeSize = c_defaultPlaneSize;
 int PMPlane::s_parameterKey = 0;
 
-PMDefinePropertyClass( PMPlane, PMProperty );
+PMDefinePropertyClass( PMPlane, PMPlaneProperty );
 
 PMMetaObject* PMPlane::s_pMetaObject = 0;
 PMObject* createNewPlane( PMPart* part )
@@ -89,9 +89,9 @@
       s_pMetaObject = new PMMetaObject( "Plane", Base::metaObject( ),
                                         createNewPlane );
       s_pMetaObject->addProperty(
-         new PMProperty( "normal", &PMPlane::setNormal, &PMPlane::normal ) );
+         new PMPlaneProperty( "normal", &PMPlane::setNormal, &PMPlane::normal ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "distance", &PMPlane::setDistance, &PMPlane::distance ) );
+         new PMPlaneProperty( "distance", &PMPlane::setDistance, &PMPlane::distance ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmpolynom.cpp kdegraphics/kpovmodeler/pmpolynom.cpp
--- kdegraphics.orig/kpovmodeler/pmpolynom.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmpolynom.cpp	Fri Oct 15 15:24:25 2004
@@ -35,7 +35,7 @@
 const bool c_defaultSturm = true;
 const int c_polynomSize[8] = { 0, 0, 10, 20, 35, 56, 84, 120 };
 
-PMDefinePropertyClass( PMPolynom, PMProperty );
+PMDefinePropertyClass( PMPolynom, PMPolynomProperty );
 
 class PMCoefficientProperty : public PMPropertyBase
 {
@@ -137,10 +137,10 @@
       s_pMetaObject = new PMMetaObject( "Polynom", Base::metaObject( ),
                                         createNewPolynom );
       s_pMetaObject->addProperty(
-         new PMProperty( "polynomOrder", &PMPolynom::setPolynomOrder,
+         new PMPolynomProperty( "polynomOrder", &PMPolynom::setPolynomOrder,
                          &PMPolynom::polynomOrder ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "sturm", &PMPolynom::setSturm,
+         new PMPolynomProperty( "sturm", &PMPolynom::setSturm,
                          &PMPolynom::sturm ) );
 
       s_pMetaObject->addProperty( new PMCoefficientProperty( ) );
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmpovraymatrix.cpp kdegraphics/kpovmodeler/pmpovraymatrix.cpp
--- kdegraphics.orig/kpovmodeler/pmpovraymatrix.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmpovraymatrix.cpp	Fri Oct 15 15:24:25 2004
@@ -24,7 +24,7 @@
 
 #include <klocale.h>
 
-PMDefinePropertyClass( PMPovrayMatrix, PMProperty );
+PMDefinePropertyClass( PMPovrayMatrix, PMPovrayMatrixProperty );
 
 PMMetaObject* PMPovrayMatrix::s_pMetaObject = 0;
 PMObject* createNewPovrayMatrix( PMPart* part )
@@ -79,7 +79,7 @@
       s_pMetaObject = new PMMetaObject( "PovrayMatrix", Base::metaObject( ),
                                         createNewPovrayMatrix );
       s_pMetaObject->addProperty(
-         new PMProperty( "values", &PMPovrayMatrix::setValues, &PMPovrayMatrix::values ) );
+         new PMPovrayMatrixProperty( "values", &PMPovrayMatrix::setValues, &PMPovrayMatrix::values ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmprism.cpp kdegraphics/kpovmodeler/pmprism.cpp
--- kdegraphics.orig/kpovmodeler/pmprism.cpp	Fri Sep 19 22:46:22 2003
+++ kdegraphics/kpovmodeler/pmprism.cpp	Fri Oct 15 15:24:25 2004
@@ -58,7 +58,7 @@
    return new PMPrism( part );
 }
 
-PMDefinePropertyClass( PMPrism, PMProperty );
+PMDefinePropertyClass( PMPrism, PMPrismProperty );
 PMDefineEnumPropertyClass( PMPrism, PMPrism::SplineType, PMSplineTypeProperty );
 PMDefineEnumPropertyClass( PMPrism, PMPrism::SweepType, PMSweepTypeProperty );
 
@@ -279,13 +279,13 @@
       s_pMetaObject = new PMMetaObject( "Prism", Base::metaObject( ),
                                         createNewPrism );
       s_pMetaObject->addProperty(
-         new PMProperty( "sturm", &PMPrism::setSturm, &PMPrism::sturm ) );
+         new PMPrismProperty( "sturm", &PMPrism::setSturm, &PMPrism::sturm ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "open", &PMPrism::setOpen, &PMPrism::open ) );
+         new PMPrismProperty( "open", &PMPrism::setOpen, &PMPrism::open ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "height1", &PMPrism::setHeight1, &PMPrism::height1 ) );
+         new PMPrismProperty( "height1", &PMPrism::setHeight1, &PMPrism::height1 ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "height2", &PMPrism::setHeight2, &PMPrism::height2 ) );
+         new PMPrismProperty( "height2", &PMPrism::setHeight2, &PMPrism::height2 ) );
 
       PMSplineTypeProperty* p = new PMSplineTypeProperty(
          "splineType", &PMPrism::setSplineType, &PMPrism::splineType );
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmquickcolor.cpp kdegraphics/kpovmodeler/pmquickcolor.cpp
--- kdegraphics.orig/kpovmodeler/pmquickcolor.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmquickcolor.cpp	Fri Oct 15 15:24:25 2004
@@ -28,7 +28,7 @@
 
 const PMColor colorDefault = PMColor( 1.0, 1.0, 1.0, 0.0, 0.0 );
 
-PMDefinePropertyClass( PMQuickColor, PMProperty );
+PMDefinePropertyClass( PMQuickColor, PMQuickColorProperty );
 
 PMMetaObject* PMQuickColor::s_pMetaObject = 0;
 PMObject* createNewQuickColor( PMPart* part )
@@ -74,7 +74,7 @@
       s_pMetaObject = new PMMetaObject( "QuickColor", Base::metaObject( ),
                                         createNewQuickColor );
       s_pMetaObject->addProperty(
-         new PMProperty( "color", &PMQuickColor::setColor, &PMQuickColor::color ) );
+         new PMQuickColorProperty( "color", &PMQuickColor::setColor, &PMQuickColor::color ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmradiosity.cpp kdegraphics/kpovmodeler/pmradiosity.cpp
--- kdegraphics.orig/kpovmodeler/pmradiosity.cpp	Mon Sep  8 05:49:12 2003
+++ kdegraphics/kpovmodeler/pmradiosity.cpp	Fri Oct 15 15:24:25 2004
@@ -36,7 +36,7 @@
 const double pretraceEndDefault = 0.04;
 const int recursionLimitDefault = 2;
 
-PMDefinePropertyClass( PMRadiosity, PMProperty );
+PMDefinePropertyClass( PMRadiosity, PMRadiosityProperty );
 PMMetaObject* PMRadiosity::s_pMetaObject = 0;
 PMObject* createNewRadiosity( PMPart* part )
 {
@@ -93,35 +93,35 @@
       s_pMetaObject = new PMMetaObject( "Radiosity", Base::metaObject( ),
                                         createNewRadiosity );
       s_pMetaObject->addProperty(
-         new PMProperty( "adcBailout", &PMRadiosity::setAdcBailout, &PMRadiosity::adcBailout ) );
+         new PMRadiosityProperty( "adcBailout", &PMRadiosity::setAdcBailout, &PMRadiosity::adcBailout ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "alwaysSample", &PMRadiosity::setAlwaysSample, &PMRadiosity::alwaysSample ) );
+         new PMRadiosityProperty( "alwaysSample", &PMRadiosity::setAlwaysSample, &PMRadiosity::alwaysSample ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "brightness", &PMRadiosity::setBrightness, &PMRadiosity::brightness ) );
+         new PMRadiosityProperty( "brightness", &PMRadiosity::setBrightness, &PMRadiosity::brightness ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "count", &PMRadiosity::setCount, &PMRadiosity::count ) );
+         new PMRadiosityProperty( "count", &PMRadiosity::setCount, &PMRadiosity::count ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "errorBound", &PMRadiosity::setErrorBound, &PMRadiosity::errorBound ) );
+         new PMRadiosityProperty( "errorBound", &PMRadiosity::setErrorBound, &PMRadiosity::errorBound ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "grayThreshold", &PMRadiosity::setGrayThreshold, &PMRadiosity::grayThreshold ) );
+         new PMRadiosityProperty( "grayThreshold", &PMRadiosity::setGrayThreshold, &PMRadiosity::grayThreshold ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "lowErrorFactor", &PMRadiosity::setLowErrorFactor, &PMRadiosity::lowErrorFactor ) );
+         new PMRadiosityProperty( "lowErrorFactor", &PMRadiosity::setLowErrorFactor, &PMRadiosity::lowErrorFactor ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "maxSample", &PMRadiosity::setMaxSample, &PMRadiosity::maxSample ) );
+         new PMRadiosityProperty( "maxSample", &PMRadiosity::setMaxSample, &PMRadiosity::maxSample ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "media", &PMRadiosity::setMedia, &PMRadiosity::media ) );
+         new PMRadiosityProperty( "media", &PMRadiosity::setMedia, &PMRadiosity::media ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "minimumReuse", &PMRadiosity::setMinimumReuse, &PMRadiosity::minimumReuse ) );
+         new PMRadiosityProperty( "minimumReuse", &PMRadiosity::setMinimumReuse, &PMRadiosity::minimumReuse ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "nearestCount", &PMRadiosity::setNearestCount, &PMRadiosity::nearestCount ) );
+         new PMRadiosityProperty( "nearestCount", &PMRadiosity::setNearestCount, &PMRadiosity::nearestCount ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "normal", &PMRadiosity::setNormal, &PMRadiosity::normal ) );
+         new PMRadiosityProperty( "normal", &PMRadiosity::setNormal, &PMRadiosity::normal ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "pretraceStart", &PMRadiosity::setPretraceStart, &PMRadiosity::pretraceStart ) );
+         new PMRadiosityProperty( "pretraceStart", &PMRadiosity::setPretraceStart, &PMRadiosity::pretraceStart ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "pretraceEnd", &PMRadiosity::setPretraceEnd, &PMRadiosity::pretraceEnd ) );
+         new PMRadiosityProperty( "pretraceEnd", &PMRadiosity::setPretraceEnd, &PMRadiosity::pretraceEnd ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "recursionLimit", &PMRadiosity::setRecursionLimit, &PMRadiosity::recursionLimit ) );
+         new PMRadiosityProperty( "recursionLimit", &PMRadiosity::setRecursionLimit, &PMRadiosity::recursionLimit ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmrainbow.cpp kdegraphics/kpovmodeler/pmrainbow.cpp
--- kdegraphics.orig/kpovmodeler/pmrainbow.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmrainbow.cpp	Fri Oct 15 15:24:25 2004
@@ -39,7 +39,7 @@
 const double arcAngleDefault = 0.0;
 const double falloffAngleDefault = 0.0;
 
-PMDefinePropertyClass( PMRainbow, PMProperty );
+PMDefinePropertyClass( PMRainbow, PMRainbowProperty );
 
 PMRainbow::PMRainbow( PMPart* part )
       : Base( part )
@@ -94,37 +94,37 @@
       s_pMetaObject = new PMMetaObject( "Rainbow", Base::metaObject( ),
                                         createNewRainbow );
       s_pMetaObject->addProperty(
-         new PMProperty( "direction", &PMRainbow::setDirection, &PMRainbow::direction ) );
+         new PMRainbowProperty( "direction", &PMRainbow::setDirection, &PMRainbow::direction ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "angle", &PMRainbow::setAngle, &PMRainbow::angle ) );
+         new PMRainbowProperty( "angle", &PMRainbow::setAngle, &PMRainbow::angle ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "width", &PMRainbow::setWidth, &PMRainbow::width ) );
+         new PMRainbowProperty( "width", &PMRainbow::setWidth, &PMRainbow::width ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "distance", &PMRainbow::setDistance, &PMRainbow::distance ) );
+         new PMRainbowProperty( "distance", &PMRainbow::setDistance, &PMRainbow::distance ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "jitter", &PMRainbow::setJitter, &PMRainbow::jitter ) );
+         new PMRainbowProperty( "jitter", &PMRainbow::setJitter, &PMRainbow::jitter ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "up", &PMRainbow::setUp, &PMRainbow::up ) );
+         new PMRainbowProperty( "up", &PMRainbow::setUp, &PMRainbow::up ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "arcAngle", &PMRainbow::setArcAngle, &PMRainbow::arcAngle ) );
+         new PMRainbowProperty( "arcAngle", &PMRainbow::setArcAngle, &PMRainbow::arcAngle ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "falloffAngle", &PMRainbow::setFalloffAngle, &PMRainbow::falloffAngle ) );
+         new PMRainbowProperty( "falloffAngle", &PMRainbow::setFalloffAngle, &PMRainbow::falloffAngle ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "directionEnabled", &PMRainbow::enableDirection, &PMRainbow::isDirectionEnabled ) );
+         new PMRainbowProperty( "directionEnabled", &PMRainbow::enableDirection, &PMRainbow::isDirectionEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "angleEnabled", &PMRainbow::enableAngle, &PMRainbow::isAngleEnabled ) );
+         new PMRainbowProperty( "angleEnabled", &PMRainbow::enableAngle, &PMRainbow::isAngleEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "widthEnabled", &PMRainbow::enableWidth, &PMRainbow::isWidthEnabled ) );
+         new PMRainbowProperty( "widthEnabled", &PMRainbow::enableWidth, &PMRainbow::isWidthEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "distanceEnabled", &PMRainbow::enableDistance, &PMRainbow::isDistanceEnabled ) );
+         new PMRainbowProperty( "distanceEnabled", &PMRainbow::enableDistance, &PMRainbow::isDistanceEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "jitterEnabled", &PMRainbow::enableJitter, &PMRainbow::isJitterEnabled ) );
+         new PMRainbowProperty( "jitterEnabled", &PMRainbow::enableJitter, &PMRainbow::isJitterEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "upEnabled", &PMRainbow::enableUp, &PMRainbow::isUpEnabled ) );
+         new PMRainbowProperty( "upEnabled", &PMRainbow::enableUp, &PMRainbow::isUpEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "arcAngleEnabled", &PMRainbow::enableArcAngle, &PMRainbow::isArcAngleEnabled ) );
+         new PMRainbowProperty( "arcAngleEnabled", &PMRainbow::enableArcAngle, &PMRainbow::isArcAngleEnabled ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "falloffAngleEnabled", &PMRainbow::enableFalloffAngle, &PMRainbow::isFalloffAngleEnabled ) );
+         new PMRainbowProperty( "falloffAngleEnabled", &PMRainbow::enableFalloffAngle, &PMRainbow::isFalloffAngleEnabled ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmraw.cpp kdegraphics/kpovmodeler/pmraw.cpp
--- kdegraphics.orig/kpovmodeler/pmraw.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmraw.cpp	Fri Oct 15 15:24:25 2004
@@ -25,7 +25,7 @@
 #include <klocale.h>
 #include <qtextstream.h>
 
-PMDefinePropertyClass( PMRaw, PMProperty );
+PMDefinePropertyClass( PMRaw, PMRawProperty );
 
 PMMetaObject* PMRaw::s_pMetaObject = 0;
 PMObject* createNewRaw( PMPart* part )
@@ -76,7 +76,7 @@
       s_pMetaObject = new PMMetaObject( "Raw", Base::metaObject( ),
                                         createNewRaw );
       s_pMetaObject->addProperty(
-         new PMProperty( "code", &PMRaw::setCode, &PMRaw::code ) );
+         new PMRawProperty( "code", &PMRaw::setCode, &PMRaw::code ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmrotate.cpp kdegraphics/kpovmodeler/pmrotate.cpp
--- kdegraphics.orig/kpovmodeler/pmrotate.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmrotate.cpp	Fri Oct 15 15:24:25 2004
@@ -28,7 +28,7 @@
 
 const PMVector rotateDefault = PMVector( 0, 0, 0 );
 
-PMDefinePropertyClass( PMRotate, PMProperty );
+PMDefinePropertyClass( PMRotate, PMRotateProperty );
 
 PMMetaObject* PMRotate::s_pMetaObject = 0;
 PMObject* createNewRotate( PMPart* part )
@@ -73,7 +73,7 @@
       s_pMetaObject = new PMMetaObject( "Rotate", Base::metaObject( ),
                                         createNewRotate );
       s_pMetaObject->addProperty(
-         new PMProperty( "rotation", &PMRotate::setRotation, &PMRotate::rotation ) );
+         new PMRotateProperty( "rotation", &PMRotate::setRotation, &PMRotate::rotation ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmscale.cpp kdegraphics/kpovmodeler/pmscale.cpp
--- kdegraphics.orig/kpovmodeler/pmscale.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmscale.cpp	Fri Oct 15 15:24:25 2004
@@ -27,7 +27,7 @@
 
 const PMVector scaleDefault = PMVector( 0, 0, 0 );
 
-PMDefinePropertyClass( PMScale, PMProperty );
+PMDefinePropertyClass( PMScale, PMScaleProperty );
 
 PMMetaObject* PMScale::s_pMetaObject = 0;
 PMObject* createNewScale( PMPart* part )
@@ -73,7 +73,7 @@
       s_pMetaObject = new PMMetaObject( "Scale", Base::metaObject( ),
                                         createNewScale );
       s_pMetaObject->addProperty(
-         new PMProperty( "scale", &PMScale::setScale, &PMScale::scale ) );
+         new PMScaleProperty( "scale", &PMScale::setScale, &PMScale::scale ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmslope.cpp kdegraphics/kpovmodeler/pmslope.cpp
--- kdegraphics.orig/kpovmodeler/pmslope.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmslope.cpp	Fri Oct 15 15:24:25 2004
@@ -26,7 +26,7 @@
 const double heightDefault = 0;
 const double slopeDefault = 0;
 
-PMDefinePropertyClass( PMSlope, PMProperty );
+PMDefinePropertyClass( PMSlope, PMSlopeProperty );
 
 PMMetaObject* PMSlope::s_pMetaObject = 0;
 PMObject* createNewSlope( PMPart* part )
@@ -76,9 +76,9 @@
       s_pMetaObject = new PMMetaObject( "Slope", Base::metaObject( ),
                                         createNewSlope );
       s_pMetaObject->addProperty(
-         new PMProperty( "height", &PMSlope::setHeight, &PMSlope::height ) );
+         new PMSlopeProperty( "height", &PMSlope::setHeight, &PMSlope::height ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "slope", &PMSlope::setSlope, &PMSlope::slope ) );
+         new PMSlopeProperty( "slope", &PMSlope::setSlope, &PMSlope::slope ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmsolidcolor.cpp kdegraphics/kpovmodeler/pmsolidcolor.cpp
--- kdegraphics.orig/kpovmodeler/pmsolidcolor.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmsolidcolor.cpp	Fri Oct 15 15:24:25 2004
@@ -26,7 +26,7 @@
 
 const PMColor colorDefault = PMColor( 0.0, 0.0, 0.0, 0.0, 0.0 );
 
-PMDefinePropertyClass( PMSolidColor, PMProperty );
+PMDefinePropertyClass( PMSolidColor, PMSolidColorProperty );
 
 PMMetaObject* PMSolidColor::s_pMetaObject = 0;
 PMObject* createNewSolidColor( PMPart* part )
@@ -72,7 +72,7 @@
       s_pMetaObject = new PMMetaObject( "SolidColor", Base::metaObject( ),
                                         createNewSolidColor );
       s_pMetaObject->addProperty(
-         new PMProperty( "color", &PMSolidColor::setColor, &PMSolidColor::color ) );
+         new PMSolidColorProperty( "color", &PMSolidColor::setColor, &PMSolidColor::color ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmsolidobject.cpp kdegraphics/kpovmodeler/pmsolidobject.cpp
--- kdegraphics.orig/kpovmodeler/pmsolidobject.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmsolidobject.cpp	Fri Oct 15 15:24:25 2004
@@ -21,7 +21,7 @@
 #include "pmmemento.h"
 
 
-PMDefinePropertyClass( PMSolidObject, PMProperty );
+PMDefinePropertyClass( PMSolidObject, PMSolidObjectProperty );
 
 PMMetaObject* PMSolidObject::s_pMetaObject = 0;
 
@@ -49,9 +49,9 @@
    {
       s_pMetaObject = new PMMetaObject( "SolidObject", Base::metaObject( ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "inverse", &PMSolidObject::setInverse, &PMSolidObject::inverse ) );
+         new PMSolidObjectProperty( "inverse", &PMSolidObject::setInverse, &PMSolidObject::inverse ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "hollow", &PMSolidObject::setHollow, &PMSolidObject::hollow ) );
+         new PMSolidObjectProperty( "hollow", &PMSolidObject::setHollow, &PMSolidObject::hollow ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmsor.cpp kdegraphics/kpovmodeler/pmsor.cpp
--- kdegraphics.orig/kpovmodeler/pmsor.cpp	Fri Sep 19 22:46:22 2003
+++ kdegraphics/kpovmodeler/pmsor.cpp	Fri Oct 15 15:24:25 2004
@@ -51,7 +51,7 @@
    return new PMSurfaceOfRevolution( part );
 }
 
-PMDefinePropertyClass( PMSurfaceOfRevolution, PMProperty );
+PMDefinePropertyClass( PMSurfaceOfRevolution, PMSurfaceOfRevolutionProperty );
 
 class PMPointProperty : public PMPropertyBase
 {
@@ -201,10 +201,10 @@
       s_pMetaObject = new PMMetaObject( "SurfaceOfRevolution", Base::metaObject( ),
                                         createNewSurfaceOfRevolution );
       s_pMetaObject->addProperty(
-         new PMProperty( "sturm", &PMSurfaceOfRevolution::setSturm,
+         new PMSurfaceOfRevolutionProperty( "sturm", &PMSurfaceOfRevolution::setSturm,
                          &PMSurfaceOfRevolution::sturm ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "open", &PMSurfaceOfRevolution::setOpen,
+         new PMSurfaceOfRevolutionProperty( "open", &PMSurfaceOfRevolution::setOpen,
                          &PMSurfaceOfRevolution::open ) );
       s_pMetaObject->addProperty( new PMPointProperty( ) );
    }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmsphere.cpp kdegraphics/kpovmodeler/pmsphere.cpp
--- kdegraphics.orig/kpovmodeler/pmsphere.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmsphere.cpp	Fri Oct 15 15:24:25 2004
@@ -39,7 +39,7 @@
 int PMSphere::s_uStep = c_defaultSphereUSteps;
 int PMSphere::s_parameterKey = 0;
 
-PMDefinePropertyClass( PMSphere, PMProperty );
+PMDefinePropertyClass( PMSphere, PMSphereProperty );
 
 PMMetaObject* PMSphere::s_pMetaObject = 0;
 PMObject* createNewSphere( PMPart* part )
@@ -78,9 +78,9 @@
       s_pMetaObject = new PMMetaObject( "Sphere", Base::metaObject( ),
                                         createNewSphere );
       s_pMetaObject->addProperty(
-         new PMProperty( "radius", &PMSphere::setRadius, &PMSphere::radius ) );
+         new PMSphereProperty( "radius", &PMSphere::setRadius, &PMSphere::radius ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "center", &PMSphere::setCentre, &PMSphere::centre ) );
+         new PMSphereProperty( "center", &PMSphere::setCentre, &PMSphere::centre ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmspheresweep.cpp kdegraphics/kpovmodeler/pmspheresweep.cpp
--- kdegraphics.orig/kpovmodeler/pmspheresweep.cpp	Tue Nov  4 07:12:34 2003
+++ kdegraphics/kpovmodeler/pmspheresweep.cpp	Fri Oct 15 15:24:25 2004
@@ -47,7 +47,7 @@
 const double defaultTolerance = 1e-6;
 const PMSphereSweep::SplineType defaultSplineType = PMSphereSweep::LinearSpline;
 
-PMDefinePropertyClass( PMSphereSweep, PMProperty );
+PMDefinePropertyClass( PMSphereSweep, PMSphereSweepProperty );
 PMDefineEnumPropertyClass( PMSphereSweep, PMSphereSweep::SplineType, PMSplineTypeProperty );
 
 PMMetaObject* PMSphereSweep::s_pMetaObject = 0;
@@ -223,7 +223,7 @@
       s_pMetaObject = new PMMetaObject( "SphereSweep", Base::metaObject( ),
                                         createNewSphereSweep );
       s_pMetaObject->addProperty(
-         new PMProperty( "tolerance", &PMSphereSweep::setTolerance, &PMSphereSweep::tolerance ) );
+         new PMSphereSweepProperty( "tolerance", &PMSphereSweep::setTolerance, &PMSphereSweep::tolerance ) );
       PMSplineTypeProperty* p = new PMSplineTypeProperty(
          "splineType", &PMSphereSweep::setSplineType, &PMSphereSweep::splineType );
       p->addEnumValue( "LinearSpline", LinearSpline );
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmsqe.cpp kdegraphics/kpovmodeler/pmsqe.cpp
--- kdegraphics.orig/kpovmodeler/pmsqe.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmsqe.cpp	Fri Oct 15 15:24:25 2004
@@ -35,7 +35,7 @@
 int PMSuperquadricEllipsoid::s_uStep = c_defaultSuperquadricEllipsoidUSteps;
 int PMSuperquadricEllipsoid::s_parameterKey = 0;
 
-PMDefinePropertyClass( PMSuperquadricEllipsoid, PMProperty );
+PMDefinePropertyClass( PMSuperquadricEllipsoid, PMSuperquadricEllipsoidProperty );
 
 PMMetaObject* PMSuperquadricEllipsoid::s_pMetaObject = 0;
 PMObject* createNewSuperquadricEllipsoid( PMPart* part )
@@ -87,11 +87,11 @@
       s_pMetaObject = new PMMetaObject( "SuperquadricEllipsoid", Base::metaObject( ),
                                         createNewSuperquadricEllipsoid );
       s_pMetaObject->addProperty(
-         new PMProperty( "eastWestExponent",
+         new PMSuperquadricEllipsoidProperty( "eastWestExponent",
                          &PMSuperquadricEllipsoid::setEastWestExponent,
                          &PMSuperquadricEllipsoid::eastWestExponent ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "northSouthExponent",
+         new PMSuperquadricEllipsoidProperty( "northSouthExponent",
                          &PMSuperquadricEllipsoid::setNorthSouthExponent,
                          &PMSuperquadricEllipsoid::northSouthExponent ) );
    }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmtext.cpp kdegraphics/kpovmodeler/pmtext.cpp
--- kdegraphics.orig/kpovmodeler/pmtext.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmtext.cpp	Fri Oct 15 15:24:25 2004
@@ -36,7 +36,7 @@
 int PMText::s_parameterKey = 0;
 int PMText::s_steps = c_defaultTextSteps;
 
-PMDefinePropertyClass( PMText, PMProperty );
+PMDefinePropertyClass( PMText, PMTextProperty );
 
 PMMetaObject* PMText::s_pMetaObject = 0;
 PMObject* createNewText( PMPart* part )
@@ -96,13 +96,13 @@
       s_pMetaObject = new PMMetaObject( "Text", Base::metaObject( ),
                                         createNewText );
       s_pMetaObject->addProperty(
-         new PMProperty( "font", &PMText::setFont, &PMText::font ) );
+         new PMTextProperty( "font", &PMText::setFont, &PMText::font ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "text", &PMText::setText, &PMText::text ) );
+         new PMTextProperty( "text", &PMText::setText, &PMText::text ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "thickness", &PMText::setThickness, &PMText::thickness ) );
+         new PMTextProperty( "thickness", &PMText::setThickness, &PMText::thickness ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "offset", &PMText::setOffset, &PMText::offset ) );
+         new PMTextProperty( "offset", &PMText::setOffset, &PMText::offset ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmtexture.cpp kdegraphics/kpovmodeler/pmtexture.cpp
--- kdegraphics.orig/kpovmodeler/pmtexture.cpp	Thu Apr 22 23:47:05 2004
+++ kdegraphics/kpovmodeler/pmtexture.cpp	Fri Oct 15 15:24:25 2004
@@ -23,7 +23,7 @@
 
 #include <klocale.h>
 
-PMDefinePropertyClass( PMTexture, PMProperty );
+PMDefinePropertyClass( PMTexture, PMTextureProperty );
 
 PMMetaObject* PMTexture::s_pMetaObject = 0;
 PMObject* createNewTexture( PMPart* part )
@@ -52,7 +52,7 @@
       s_pMetaObject = new PMMetaObject( "Texture", Base::metaObject( ),
                                         createNewTexture );
       s_pMetaObject->addProperty(
-         new PMProperty( "uvMapping", &PMTexture::setUVMapping, &PMTexture::uvMapping ) );
+         new PMTextureProperty( "uvMapping", &PMTexture::setUVMapping, &PMTexture::uvMapping ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmtexturebase.cpp kdegraphics/kpovmodeler/pmtexturebase.cpp
--- kdegraphics.orig/kpovmodeler/pmtexturebase.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmtexturebase.cpp	Fri Oct 15 15:24:25 2004
@@ -28,7 +28,7 @@
 
 #include <klocale.h>
 
-PMDefinePropertyClass( PMTextureBase, PMProperty );
+PMDefinePropertyClass( PMTextureBase, PMTextureBaseProperty );
 
 PMMetaObject* PMTextureBase::s_pMetaObject = 0;
 
@@ -55,10 +55,10 @@
    {
       s_pMetaObject = new PMMetaObject( "TextureBase", Base::metaObject( ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "linkedObject", &PMTextureBase::setLinkedObjectProperty,
+         new PMTextureBaseProperty( "linkedObject", &PMTextureBase::setLinkedObjectProperty,
                          &PMTextureBase::linkedObjectProperty ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "hasLinkedObject", 0, &PMTextureBase::hasLinkedObject ) );
+         new PMTextureBaseProperty( "hasLinkedObject", 0, &PMTextureBase::hasLinkedObject ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmtorus.cpp kdegraphics/kpovmodeler/pmtorus.cpp
--- kdegraphics.orig/kpovmodeler/pmtorus.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmtorus.cpp	Fri Oct 15 15:24:25 2004
@@ -40,7 +40,7 @@
 int PMTorus::s_uStep = c_defaultTorusUSteps;
 int PMTorus::s_parameterKey = 0;
 
-PMDefinePropertyClass( PMTorus, PMProperty );
+PMDefinePropertyClass( PMTorus, PMTorusProperty );
 
 PMMetaObject* PMTorus::s_pMetaObject = 0;
 PMObject* createNewTorus( PMPart* part )
@@ -81,13 +81,13 @@
       s_pMetaObject = new PMMetaObject( "Torus", Base::metaObject( ),
                                         createNewTorus );
       s_pMetaObject->addProperty(
-         new PMProperty( "minorRadius", &PMTorus::setMinorRadius,
+         new PMTorusProperty( "minorRadius", &PMTorus::setMinorRadius,
                          &PMTorus::minorRadius ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "majorRadius", &PMTorus::setMajorRadius,
+         new PMTorusProperty( "majorRadius", &PMTorus::setMajorRadius,
                          &PMTorus::majorRadius ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "sturm", &PMTorus::setSturm, &PMTorus::sturm ) );
+         new PMTorusProperty( "sturm", &PMTorus::setSturm, &PMTorus::sturm ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmtranslate.cpp kdegraphics/kpovmodeler/pmtranslate.cpp
--- kdegraphics.orig/kpovmodeler/pmtranslate.cpp	Fri Jul  4 23:23:34 2003
+++ kdegraphics/kpovmodeler/pmtranslate.cpp	Fri Oct 15 15:24:25 2004
@@ -27,7 +27,7 @@
 
 const PMVector moveDefault = PMVector( 0.0, 0.0, 0.0 );
 
-PMDefinePropertyClass( PMTranslate, PMProperty );
+PMDefinePropertyClass( PMTranslate, PMTranslateProperty );
 
 PMMetaObject* PMTranslate::s_pMetaObject = 0;
 PMObject* createNewTranslate( PMPart* part )
@@ -72,7 +72,7 @@
       s_pMetaObject = new PMMetaObject( "Translate", Base::metaObject( ),
                                         createNewTranslate );
       s_pMetaObject->addProperty(
-         new PMProperty( "translation", &PMTranslate::setTranslation, &PMTranslate::translation ) );
+         new PMTranslateProperty( "translation", &PMTranslate::setTranslation, &PMTranslate::translation ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmtriangle.cpp kdegraphics/kpovmodeler/pmtriangle.cpp
--- kdegraphics.orig/kpovmodeler/pmtriangle.cpp	Thu Apr 22 23:47:05 2004
+++ kdegraphics/kpovmodeler/pmtriangle.cpp	Fri Oct 15 15:24:25 2004
@@ -37,7 +37,7 @@
 const PMVector uvVector1Default = PMVector( 1.0, 0.0 );
 const PMVector uvVector2Default = PMVector( 0.5, 1.0 );
 
-PMDefinePropertyClass( PMTriangle, PMProperty );
+PMDefinePropertyClass( PMTriangle, PMTriangleProperty );
 
 class PMPointProperty : public PMPropertyBase
 {
@@ -235,7 +235,7 @@
       s_pMetaObject = new PMMetaObject( "Triangle", Base::metaObject( ),
                                         createNewTriangle );
       s_pMetaObject->addProperty(
-         new PMProperty( "smooth", &PMTriangle::setSmoothTriangle,
+         new PMTriangleProperty( "smooth", &PMTriangle::setSmoothTriangle,
                          &PMTriangle::isSmoothTriangle ) );
       s_pMetaObject->addProperty( new PMPointProperty( ) );
       s_pMetaObject->addProperty( new PMNormalProperty( ) );
diff -urN -x CVS kdegraphics.orig/kpovmodeler/pmwarp.cpp kdegraphics/kpovmodeler/pmwarp.cpp
--- kdegraphics.orig/kpovmodeler/pmwarp.cpp	Wed Jan  7 06:23:48 2004
+++ kdegraphics/kpovmodeler/pmwarp.cpp	Fri Oct 15 15:24:25 2004
@@ -42,7 +42,7 @@
 const double distExpDefault = 0.0;
 const double majorRadiusDefault = 1.0;
 
-PMDefinePropertyClass( PMWarp, PMProperty );
+PMDefinePropertyClass( PMWarp, PMWarpProperty );
 PMDefineEnumPropertyClass( PMWarp, PMWarp::PMWarpType, PMWarpTypeProperty );
 
 PMMetaObject* PMWarp::s_pMetaObject = 0;
@@ -240,39 +240,39 @@
       s_pMetaObject->addProperty( p );
 
       s_pMetaObject->addProperty(
-         new PMProperty( "direction", &PMWarp::setDirection, &PMWarp::direction ) );
+         new PMWarpProperty( "direction", &PMWarp::setDirection, &PMWarp::direction ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "offset", &PMWarp::setOffset, &PMWarp::offset ) );
+         new PMWarpProperty( "offset", &PMWarp::setOffset, &PMWarp::offset ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "flip", &PMWarp::setFlip, &PMWarp::flip ) );
+         new PMWarpProperty( "flip", &PMWarp::setFlip, &PMWarp::flip ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "location", &PMWarp::setLocation, &PMWarp::location ) );
+         new PMWarpProperty( "location", &PMWarp::setLocation, &PMWarp::location ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "radius", &PMWarp::setRadius, &PMWarp::radius ) );
+         new PMWarpProperty( "radius", &PMWarp::setRadius, &PMWarp::radius ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "strength", &PMWarp::setStrength, &PMWarp::strength ) );
+         new PMWarpProperty( "strength", &PMWarp::setStrength, &PMWarp::strength ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "falloff", &PMWarp::setFalloff, &PMWarp::falloff ) );
+         new PMWarpProperty( "falloff", &PMWarp::setFalloff, &PMWarp::falloff ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "inverse", &PMWarp::setInverse, &PMWarp::inverse ) );
+         new PMWarpProperty( "inverse", &PMWarp::setInverse, &PMWarp::inverse ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "repeat", &PMWarp::setRepeat, &PMWarp::repeat ) );
+         new PMWarpProperty( "repeat", &PMWarp::setRepeat, &PMWarp::repeat ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "turbulence", &PMWarp::setTurbulence, &PMWarp::turbulence ) );
+         new PMWarpProperty( "turbulence", &PMWarp::setTurbulence, &PMWarp::turbulence ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "valueVector", &PMWarp::setValueVector, &PMWarp::valueVector ) );
+         new PMWarpProperty( "valueVector", &PMWarp::setValueVector, &PMWarp::valueVector ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "octaves", &PMWarp::setOctaves, &PMWarp::octaves ) );
+         new PMWarpProperty( "octaves", &PMWarp::setOctaves, &PMWarp::octaves ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "omega", &PMWarp::setOmega, &PMWarp::omega ) );
+         new PMWarpProperty( "omega", &PMWarp::setOmega, &PMWarp::omega ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "lambda", &PMWarp::setLambda, &PMWarp::lambda ) );
+         new PMWarpProperty( "lambda", &PMWarp::setLambda, &PMWarp::lambda ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "orientation", &PMWarp::setOrientation, &PMWarp::orientation ) );
+         new PMWarpProperty( "orientation", &PMWarp::setOrientation, &PMWarp::orientation ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "dist_exp", &PMWarp::setDistExp, &PMWarp::distExp ) );
+         new PMWarpProperty( "dist_exp", &PMWarp::setDistExp, &PMWarp::distExp ) );
       s_pMetaObject->addProperty(
-         new PMProperty( "major_radius", &PMWarp::setMajorRadius, &PMWarp::majorRadius ) );
+         new PMWarpProperty( "major_radius", &PMWarp::setMajorRadius, &PMWarp::majorRadius ) );
    }
    return s_pMetaObject;
 }
diff -urN -x CVS kdegraphics.orig/kview/config/plugins/kviewpluginsconfig.desktop kdegraphics/kview/config/plugins/kviewpluginsconfig.desktop
--- kdegraphics.orig/kview/config/plugins/kviewpluginsconfig.desktop	Tue Sep 14 16:28:14 2004
+++ kdegraphics/kview/config/plugins/kviewpluginsconfig.desktop	Mon Oct  4 15:24:46 2004
@@ -44,7 +44,7 @@
 Name[sk]=Moduly
 Name[sl]=Vstavki
 Name[sr]=Прикључци
-Name[sr@Latn]=Dodaci
+Name[sr@Latn]=Priključci
 Name[ss]=Ema- Plugin
 Name[sv]=Insticksprogram
 Name[ta]=சொருகுப்பொருள்
@@ -84,7 +84,7 @@
 Comment[sk]=Vyberte a nastavte si moduly:
 Comment[sl]=Izberite in nastavite vstavke:
 Comment[sr]=Изаберите и подесите ваше прикључке:
-Comment[sr@Latn]=Izaberite i podesite vaše dodatke:
+Comment[sr@Latn]=Izaberite i podesite vaše priključke:
 Comment[sv]=Välj och anpassa insticksprogram:
 Comment[ta]=சொருகுப்பொருளை தேர்ந்தெடுத்து வடிவமைக்கவும்
 Comment[tg]=Модулҳоро интихоб ва танзим кунед:
diff -urN -x CVS kdegraphics.orig/kview/kviewviewer/config/kviewviewerpluginsconfig.desktop kdegraphics/kview/kviewviewer/config/kviewviewerpluginsconfig.desktop
--- kdegraphics.orig/kview/kviewviewer/config/kviewviewerpluginsconfig.desktop	Tue Sep 14 16:28:16 2004
+++ kdegraphics/kview/kviewviewer/config/kviewviewerpluginsconfig.desktop	Mon Oct  4 15:24:46 2004
@@ -44,7 +44,7 @@
 Name[sk]=Moduly
 Name[sl]=Vstavki
 Name[sr]=Прикључци
-Name[sr@Latn]=Dodaci
+Name[sr@Latn]=Priključci
 Name[ss]=Ema- Plugin
 Name[sv]=Insticksprogram
 Name[ta]=சொருகுப்பொருள்
@@ -84,7 +84,7 @@
 Comment[sk]=Vyberte a nastavte si moduly:
 Comment[sl]=Izberite in nastavite vstavke:
 Comment[sr]=Изаберите и подесите ваше прикључке:
-Comment[sr@Latn]=Izaberite i podesite vaše dodatke:
+Comment[sr@Latn]=Izaberite i podesite vaše priključke:
 Comment[sv]=Välj och anpassa insticksprogram:
 Comment[ta]=சொருகுப்பொருளை தேர்ந்தெடுத்து வடிவமைக்கவும்
 Comment[tg]=Модулҳоро интихоб ва танзим кунед:
diff -urN -x CVS kdegraphics.orig/kview/modules/template/kviewtemplate.desktop kdegraphics/kview/modules/template/kviewtemplate.desktop
--- kdegraphics.orig/kview/modules/template/kviewtemplate.desktop	Tue Sep 14 16:28:16 2004
+++ kdegraphics/kview/modules/template/kviewtemplate.desktop	Mon Oct  4 15:24:46 2004
@@ -93,7 +93,7 @@
 Comment[sk]=Tu by mal byť popis, čo modul robí
 Comment[sl]=Daljši opis, kaj naredi ta vstavek
 Comment[sr]=Дужи опис чему прикључак служи
-Comment[sr@Latn]=Duži opis čemu dodatak služi
+Comment[sr@Latn]=Duži opis čemu priključak služi
 Comment[sv]=En längre beskrivningen av vad insticksprogrammet gör
 Comment[ta]= சொருகுப்பொருள் செய்த பணியின் நீண்ட வருணனை
 Comment[tg]=Дар инҷо бояд тасвироти модул бошад
diff -urN -x CVS kdegraphics.orig/kviewshell/centeringScrollview.cpp kdegraphics/kviewshell/centeringScrollview.cpp
--- kdegraphics.orig/kviewshell/centeringScrollview.cpp	Mon Sep  6 07:27:24 2004
+++ kdegraphics/kviewshell/centeringScrollview.cpp	Wed Oct 13 14:27:35 2004
@@ -192,18 +192,35 @@
 
 void CenteringScrollview::centerContents()
 {
+  // Paranoid safety check
   if (widgetList == 0)
     return;
 
+  // If there are no widgets, e.g. because the last widget has been
+  // removed, the matter is easy: set the contents size to 0. If there
+  // are no widgets because previously existing widgets were removed
+  // (we detect that by looking at the contentsWidth and -Height), we
+  // make sure to update the viewport so that old shadows will be
+  // removed.
+  if (widgetList->isEmpty()) {
+    if ((contentsWidth() != 0) || (contentsHeight() != 0)) {
+      QScrollView::resizeContents(0,0);
+      viewport()->update();
+    }
+    return;
+  }
+
+  // Ok, now we are in a situation where we do have some widgets that
+  // shall be centered.
   Q_UINT32 colWidth[nrCols];
   for(Q_UINT8 i=0; i<nrCols; i++)
     colWidth[i] = 0;
-
+  
   Q_UINT16 numRows = (widgetList->size()+2*nrCols-2) / nrCols;
   Q_UINT32 rowHeight[numRows];
   for(Q_UINT16 i=0; i<numRows; i++)
     rowHeight[i] = 0;
-
+  
   // Now find the widths and heights of the columns
   for(Q_UINT16 i=0; i<widgetList->size(); i++) {
     Q_UINT8 col  = (i+(nrCols-1)) % nrCols;
@@ -299,6 +316,10 @@
 
 void CenteringScrollview::drawContents( QPainter *p, int, int, int, int )
 {
+  // Safety check
+  if ((widgetList == 0) ||  (widgetList->isEmpty()))
+    return;
+
   // Shadows are only drawn if a child widget exists, is shown and not
   // 0x0 size, and if the background is not black
   if ( (widgetList != 0) && (viewport()->paletteBackgroundColor() != Qt::black) ) {
@@ -324,11 +345,17 @@
     }
 
     // Go through all widgets, but draw frames only about those that
-    // are visible.y
+    // are visible.
     QRect visiblRect(contentsX(), contentsY(), visibleWidth(), visibleHeight());
     for(Q_UINT16 widgetNr=0; widgetNr<widgetList->size(); widgetNr++) {
       QWidget *pagePtr = widgetList->at(widgetNr);
 
+      // Paranoid safety check
+      if (pagePtr == 0) {
+	kdError(4300) << "Safety check failed in void CenteringScrollview::drawContents( QPainter *p, int, int, int, int )" << endl;
+	continue;
+      }
+
       Q_INT32 X = childX(pagePtr);
       Q_INT32 Y = childY(pagePtr);
       Q_INT32 W = pagePtr->width();
diff -urN -x CVS kdegraphics.orig/kviewshell/kviewpart.cpp kdegraphics/kviewshell/kviewpart.cpp
--- kdegraphics.orig/kviewshell/kviewpart.cpp	Wed Aug 25 20:04:43 2004
+++ kdegraphics/kviewshell/kviewpart.cpp	Wed Oct 13 14:27:35 2004
@@ -681,7 +681,9 @@
 
 void KViewPart::pageInfo(int numpages, int currentpage)
 {
+  bool markListChanged = false;
   if (_numberOfPages != numpages) {
+    markListChanged = true;
     _numberOfPages = numpages;
     markList->clear();
     if (numpages == 0) {
@@ -693,7 +695,7 @@
       markList->insertItem(QString("%1").arg(i+1), i);
   }
   
-  if (_currentPage != currentpage) {
+  if ((_currentPage != currentpage) || (markListChanged == true)) {
     _currentPage = currentpage;
     // ATTN: The string here must be the same as in setPage() below
     QString pageString = i18n("Page %1 of %2").arg(_currentPage+1).arg(_numberOfPages);
